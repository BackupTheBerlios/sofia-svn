<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.CompositeUI</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.CompositeUI.WorkItemExtension">
            <summary>
            Base implementation with virtual methods for handling the 
            <see cref="P:Microsoft.Practices.CompositeUI.WorkItemExtension.WorkItem"/> events.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.IWorkItemExtension">
            <summary>
            Represents an extension that can monitor and act upon events in the 
            lifecycle of a <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.IWorkItemExtension.Initialize(Microsoft.Practices.CompositeUI.WorkItem)">
            <summary>
            Initializes the extension with the work item being extended. 
            </summary>
            <param name="workItem">The work item being started.</param>
            <remarks>
            If the extension implements <see cref="T:System.ComponentModel.IComponent"/>, this method 
            is called after it has been sited.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItemExtension.Initialize(Microsoft.Practices.CompositeUI.WorkItem)">
            <summary>
            Hooks to all events in the <see cref="P:Microsoft.Practices.CompositeUI.WorkItemExtension.WorkItem"/> to 
            the virtual event handlers.
            </summary>
            <param name="workItem">The <see cref="P:Microsoft.Practices.CompositeUI.WorkItemExtension.WorkItem"/> being extended.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItemExtension.OnActivated">
            <summary>
            Method that handles the <see cref="E:Microsoft.Practices.CompositeUI.WorkItem.Activated"/> event on the 
            extended <see cref="P:Microsoft.Practices.CompositeUI.WorkItemExtension.WorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItemExtension.OnDeactivated">
            <summary>
            Method that handles the <see cref="E:Microsoft.Practices.CompositeUI.WorkItem.Deactivated"/> event on the 
            extended <see cref="P:Microsoft.Practices.CompositeUI.WorkItemExtension.WorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItemExtension.OnInitialized">
            <summary>
            Method that handles the <see cref="E:Microsoft.Practices.CompositeUI.WorkItem.Initialized"/> event on the 
            extended <see cref="P:Microsoft.Practices.CompositeUI.WorkItemExtension.WorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItemExtension.OnRunStarted">
            <summary>
            Method that handles the <see cref="E:Microsoft.Practices.CompositeUI.WorkItem.RunStarted"/> event on the 
            extended <see cref="P:Microsoft.Practices.CompositeUI.WorkItemExtension.WorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItemExtension.OnTerminated">
            <summary>
            Method that handles the <see cref="M:Microsoft.Practices.CompositeUI.WorkItem.OnTerminated"/> event on the 
            extended <see cref="P:Microsoft.Practices.CompositeUI.WorkItemExtension.WorkItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItemExtension.WorkItem">
            <summary>
            The <see cref="P:Microsoft.Practices.CompositeUI.WorkItemExtension.WorkItem"/> being extended.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceCancelEventArgs">
            <summary>
            Provides data for the cancellable events exposed by 
            <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceEventArgs">
            <summary>
            Provides data for the non-cancellable events exposed by 
            <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceEventArgs"/> using
            the specified SmartPart.
            </summary>
            <param name="smartPart"></param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceEventArgs.SmartPart">
            <summary>
            Gets the SmartPart associated with this event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceCancelEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceCancelEventArgs"/> using
            the specified SmartPart.
            </summary>
            <param name="smartPart"></param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceCancelEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the event should be canceled.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.SmartParts.SmartPartInfo">
            <summary>
            Provides information about a specific smartpart.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo">
            <summary>
            Provides information about a SmartPart to an <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo.Description">
            <summary>
            Description of this SmartPart.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo.Title">
            <summary>
            Title of this SmartPart.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.SmartPartInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.SmartPartInfo"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.SmartPartInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.SmartPartInfo"/> class 
            with the title and description values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.SmartPartInfo.ConvertTo``1(Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo)">
            <summary>
            Creates a new instance of the TSmartPartInfo 
            and copies over the information in the source smart part.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.SmartParts.SmartPartInfo.Description">
            <summary>
            Description to associate with the related smart part.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.SmartParts.SmartPartInfo.Title">
            <summary>
            Title to associate with the related smart part.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.SmartParts.SmartPartInfo.SmartPartInfoDesigner">
            <summary>
            Adds the SmartPart property to the smart part info at design-time.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.SmartParts.SmartPartInfo.SmartPartConverter">
            <summary>
            Provides a list of the smartparts in the current workitem to select from.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.SmartParts.SmartPartInfo.SmartPartInfoDesignerSerializer">
            <summary>
            Provides custom serialization to register the SPI with the WorkItem.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.DesignerCodeDomSerializer">
            <summary>
            Helper base class for custom serializers.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.ModuleDependencyAttribute">
            <summary>
            Indicates that this assembly has a dependency on another named module.
            The other named module will be loaded before this module. Can be used
            multiple times to indicate multiple dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.ModuleDependencyAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.ModuleDependencyAttribute"/> class
            using the provided module name as a dependency.
            </summary>
            <param name="name">The name of the module which this module depends on.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.ModuleDependencyAttribute.Name">
            <summary>
            The name of the module which this module depends on.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace">
            <summary>
            Workspaces are used to provide a surface onto which display SmartParts.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.Activate(System.Object)">
            <summary>
            Activates the smartPart on the workspace.
            </summary>
            <param name="smartPart">The smart part to activate.</param>
            <returns>
            <see langword="true"/> if the smart part was activated or was already activated, <see langword="false"/> if activation was canceled.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.ApplySmartPartInfo(System.Object,Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo)">
            <summary>
            Applies the smartPartInfo to the smartPart.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.Close(System.Object)">
            <summary>
            Closes a smart part. Disposing the smart part is the responsibility of the caller.
            </summary>
            <param name="smartPart">Smart part to close.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.Hide(System.Object)">
            <summary>
            Hides a smart part from the UI.
            </summary>
            <param name="smartPart">Smart part to hide.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.Show(System.Object,Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo)">
            <summary>
            Shows SmartPart using the given SmartPartInfo
            </summary>
            <param name="smartPart">Smart part to show.</param>
            <param name="smartPartInfo"></param>
            <returns>
            <see langword="true"/> if the smart part was displayed, <see langword="false"/> if the display was canceled.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.Show(System.Object)">
            <summary>
            Shows a smart part in the UI.
            </summary>
            <param name="smartPart">Smart part to show.</param>
            <returns>
            <see langword="true"/> if the smart part was displayed, <see langword="false"/> if the display was canceled.
            </returns>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.SmartPartClosing">
            <summary>
            Fires when smart part is closing.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.SmartPartActivating">
            <summary>
            Fires when smart part is about to activate.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.SmartPartActivated">
            <summary>
            Fires when the smartpart is activated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.SmartParts">
            <summary>
            A snapshot of the smart parts currently contained in the workspace.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.ActiveSmartPart">
            <summary>
            The currently active smart part.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.WorkItemExtensionService">
            <summary>
            Default implementation of the <see cref="T:Microsoft.Practices.CompositeUI.Services.IWorkItemExtensionService"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.IWorkItemExtensionService">
            <summary>
            Service that manages the <see cref="T:Microsoft.Practices.CompositeUI.IWorkItemExtension"/>s registration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IWorkItemExtensionService.InitializeExtensions(Microsoft.Practices.CompositeUI.WorkItem)">
            <summary>
            Creates and initializes the extensions for the given <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
            <param name="workItem">The <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> to add the extensions to and initialize 
            the extensions for.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IWorkItemExtensionService.RegisterExtension(System.Type,System.Type)">
            <summary>
            Registers a type as an extension to a specific <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> type.
            </summary>
            <param name="workItemType">The type of <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> to be extended.</param>
            <param name="extensionType">The type of the class to perform the extension.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IWorkItemExtensionService.RegisterRootExtension(System.Type)">
            <summary>
            Registers a type as an extension to the root <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
            <param name="extensionType">The type of the class to perform the extension.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.IWorkItemExtensionService.RegisteredExtensions">
            <summary>
            Gets a dictionary of the registered <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> extensions, where
            the key is the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> type, and the value is a list of the
            types of classes that offer extensions for that <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.IWorkItemExtensionService.RegisteredRootExtensions">
            <summary>
            Gets a list of the registered root <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> extension class types.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.WorkItemExtensionService.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeUI.Services.WorkItemExtensionService"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.WorkItemExtensionService.#ctor(System.Diagnostics.TraceSource)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeUI.Services.WorkItemExtensionService"/> with the given <see cref="T:System.Diagnostics.TraceSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.WorkItemExtensionService.RegisterExtension(System.Type,System.Type)">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeUI.Services.IWorkItemExtensionService.RegisterExtension(System.Type,System.Type)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.WorkItemExtensionService.RegisterRootExtension(System.Type)">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeUI.Services.IWorkItemExtensionService.RegisterRootExtension(System.Type)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.WorkItemExtensionService.InitializeExtensions(Microsoft.Practices.CompositeUI.WorkItem)">
            <summary>
            Creates and initializes the extensions for the given workItem.
            </summary>
            <param name="workItem">The <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> to add the extensions to and initialize 
            the extensions for.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.WorkItemExtensionService.RegisteredExtensions">
            <summary>
            See <see cref="P:Microsoft.Practices.CompositeUI.Services.IWorkItemExtensionService.RegisteredExtensions"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.WorkItemExtensionService.RegisteredRootExtensions">
            <summary>
            See <see cref="P:Microsoft.Practices.CompositeUI.Services.IWorkItemExtensionService.RegisteredRootExtensions"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.TraceSourceAttribute">
            <summary>
            Indicates that a property or parameter will be dependency injected with a
            <see cref="T:System.Diagnostics.TraceSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.TraceSourceAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.TraceSourceAttribute"/> class.
            </summary>
            <param name="sourceName">Name of the <see cref="T:System.Diagnostics.TraceSource"/> to get.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.TraceSourceAttribute.CreateParameter(System.Type)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.ParameterAttribute.CreateParameter(System.Type)"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.TraceSourceAttribute.SourceName">
            <summary>
            Name of the <see cref="T:System.Diagnostics.TraceSource"/> to get.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.DictionaryEventArgs">
            <summary>
            Provides data for an event that requires a dictionary of information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Utility.DataEventArgs`1">
            <summary>
            Generic arguments class to pass to event handlers that need to receive data.
            </summary>
            <typeparam name="TData">The type of data to pass.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.DataEventArgs`1.#ctor(`0)">
            <summary>
            Initializes the DataEventArgs class.
            </summary>
            <param name="data">Information related to the event.</param>
            <exception cref="T:System.ArgumentNullException">The data is null.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.DataEventArgs`1.ToString">
            <summary>
            Provides a string representation of the argument data.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Utility.DataEventArgs`1.Data">
            <summary>
            Gets the information related to the event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.DictionaryEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.DictionaryEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.DictionaryEventArgs.ToString">
            <summary>
            Provides a string representation of the argument data.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Configuration.VisualizationElementCollection">
            <summary>
            Contains the definition of a narrator.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.VisualizationElementCollection.CreateNewElement">
            <summary>
            See <see cref="M:System.Configuration.ConfigurationElementCollection.CreateNewElement"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.VisualizationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            See <see cref="M:System.Configuration.ConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.VisualizationElementCollection.GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.VisualizationElementCollection.Add(Microsoft.Practices.CompositeUI.Configuration.VisualizationElement)">
            <summary>
            Adds a new element to the collection.
            </summary>
            <param name="element">The element to be added.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1">
            <summary>
            Represents a filtered collection of objects, based on the locator used by the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.#ctor(Microsoft.Practices.ObjectBuilder.ILifetimeContainer,Microsoft.Practices.ObjectBuilder.IReadWriteLocator,Microsoft.Practices.ObjectBuilder.IBuilder{Microsoft.Practices.ObjectBuilder.BuilderStage},Microsoft.Practices.ObjectBuilder.SearchMode,Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection{`0}.IndexerCreationDelegate,System.Predicate{`0})">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.#ctor(Microsoft.Practices.ObjectBuilder.ILifetimeContainer,Microsoft.Practices.ObjectBuilder.IReadWriteLocator,Microsoft.Practices.ObjectBuilder.IBuilder{Microsoft.Practices.ObjectBuilder.BuilderStage},Microsoft.Practices.ObjectBuilder.SearchMode,Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection{`0}.IndexerCreationDelegate,System.Predicate{`0},Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection{`0})">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.Add(`0)">
            <summary>
            Adds an item to the collection, without an ID.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.Add(`0,System.String)">
            <summary>
            Adds an item to the collection, with an ID.
            </summary>
            <param name="item">The item to be added.</param>
            <param name="id">The ID of the item.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.AddNew(System.Type)">
            <summary>
            Creates a new item and adds it to the collection, without an ID.
            </summary>
            <param name="typeToBuild">The type of item to be built.</param>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.AddNew(System.Type,System.String)">
            <summary>
            Creates a new item and adds it to the collection, with an ID.
            </summary>
            <param name="typeToBuild">The type of item to be built.</param>
            <param name="id">The ID of the item.</param>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.AddNew``1">
            <summary>
            Creates a new item and adds it to the collection, without an ID.
            </summary>
            <typeparam name="TTypeToBuild">The type of item to be built.</typeparam>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.AddNew``1(System.String)">
            <summary>
            Creates a new item and adds it to the collection, with an ID.
            </summary>
            <typeparam name="TTypeToBuild">The type of item to be built.</typeparam>
            <param name="id">The ID of the item.</param>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.Contains(System.String)">
            <summary>
            Determines if the collection contains an object with the given ID.
            </summary>
            <param name="id">The ID of the object.</param>
            <returns>Returns true if the collection contains the object; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.ContainsObject(`0)">
            <summary>
            Determines if the collection contains an object.
            </summary>
            <param name="item">The object.</param>
            <returns>Returns true if the collection contains the object; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.FindByType``1">
            <summary>
            Finds all objects that are type-compatible with the given type.
            </summary>
            <typeparam name="TSearchType">The type of item to find.</typeparam>
            <returns>A collection of the found items.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.FindByType(System.Type)">
            <summary>
            Finds all objects that are type-compatible with the given type.
            </summary>
            <param name="searchType">The type of item to find.</param>
            <returns>A collection of the found items.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.Get(System.String)">
            <summary>
            Gets the object with the given ID.
            </summary>
            <param name="id">The ID to get.</param>
            <returns>The object, if present; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.Get``1(System.String)">
            <summary>
            Gets the object with the given ID.
            </summary>
            <typeparam name="TTypeToGet">The type of the object to get.</typeparam>
            <param name="id">The ID to get.</param>
            <returns>The object, if present; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.Remove(`0)">
            <summary>
            Removes an object from the container.
            </summary>
            <param name="item">The item to be removed.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.BuildFirstTimeItem(System.Type,System.String,System.Object)">
            <summary>
            Used to build a first time item (either an existing one or a new one). The Builder will
            end up locating it, and we add it to the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.BuildRepeatedItem(System.Type,System.String,System.Object)">
            <summary>
            Used to "build" an item we've already seen once. We don't use the builder, because that
            would do double-injection. Since it's already in the lifetime container, all we need to
            do is add a second locator registration for it for the right name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.GetEnumerator">
            <summary>
            Gets an enumerator which returns all the objects in the container, along with their
            names.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.Added">
            <summary>
            Event that's fired when an object is added to the collection.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.Removed">
            <summary>
            Event that's fired when an object is removed from the collection, or disposed when the
            collection is cleaning up.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.Item(System.String)">
            <summary>
            Gets an item by ID.
            </summary>
            <param name="id">The ID of the item to get.</param>
            <returns>The item, if present; null otherwise. If the collection has been given an
            <see cref="T:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.IndexerCreationDelegate"/> and the item is not found, it will be created
            using the delegate.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Collections.ManagedObjectCollection`1.IndexerCreationDelegate">
            <summary>
            The delegate used for auto-creation of an item when not present, but indexed.
            </summary>
            <param name="t">The type being asked for.</param>
            <param name="id">The ID being asked for.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.WriterLock">
            <summary>
            Helper class that makes it easier to ensure proper usage of a <see cref="T:System.Threading.ReaderWriterLock"/> 
            for writers by providing support for <see cref="T:System.IDisposable"/> and the using keyword.
            </summary>
            <example>
            Common usage is as follows:
            <code>
            ReaderWriterLock mylock = new ReaderWriterLock();
            
            // Inside some method
            using (new WriterLock(rwLock))
            {
            	// Do your safe resource write accesses here.
            }
            </code>
            If a timeout is specified, the <see cref="P:Microsoft.Practices.CompositeUI.LockBase.TimedOut"/> property should be checked inside the 
            using statement:
            <code>
            ReaderWriterLock mylock = new ReaderWriterLock();
            
            // Inside some method
            using (WriterLock l = new WriterLock(rwLock, 100))
            {
            	if (l.TimedOut == false)
            	{
            		// Do your safe resource write accesses here.
            	}
            	else
            	{
            		throw new InvalidOperationException("Could not lock the resource.");
            	}
            }
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.LockBase">
            <summary>
            Base class for <see cref="T:System.Threading.ReaderWriterLock"/> helper classes 
            <see cref="T:Microsoft.Practices.CompositeUI.ReaderLock"/> and <see cref="T:Microsoft.Practices.CompositeUI.WriterLock"/>.
            </summary>
            <seealso cref="T:Microsoft.Practices.CompositeUI.ReaderLock"/>
            <seealso cref="T:Microsoft.Practices.CompositeUI.WriterLock"/>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.LockBase.Dispose">
            <summary>
            Releases the lock acquired at construction time.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.LockBase.Dispose(System.Boolean)">
            <summary>
            Called to free resources.
            </summary>
            <param name="disposing">Should be true when calling from Dispose().</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.LockBase.TimedOut">
            <summary>
            If a timeout was specified in the constructor, it returns whether the operation 
            succeeded or timed out.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WriterLock.#ctor(System.Threading.ReaderWriterLock)">
            <summary>
            Acquires a reader lock on the rwLock received 
            with no timeout specified.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WriterLock.#ctor(System.Threading.ReaderWriterLock,System.Int32)">
            <summary>
            Tries to acquire a reader lock on the rwLock received 
            with the timeout specified. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WriterLock.#ctor(System.Threading.ReaderWriterLock,System.TimeSpan)">
            <summary>
            Tries to acquire a reader lock on the rwLock received 
            with the timeout specified. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.LoadedModuleInfo">
            <summary>
            Represents the information about a loaded module
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.LoadedModuleInfo.#ctor(System.Reflection.Assembly,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.Services.LoadedModuleInfo"/> class with the given
            assembly, name, roles and dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.LoadedModuleInfo.#ctor(Microsoft.Practices.CompositeUI.Services.LoadedModuleInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.Services.LoadedModuleInfo"/> class, copying the existing object.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.LoadedModuleInfo.Assembly">
            <summary>
            The assembly the module was loaded from.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.LoadedModuleInfo.Name">
            <summary>
            The name of the assembly, if provided.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.LoadedModuleInfo.Dependencies">
            <summary>
            The dependencies this module has, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.LoadedModuleInfo.Roles">
            <summary>
            The allowed roles this module has, if any. If empty, then all roles are allowed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.StateElement">
            <summary>
            Provides a dictionary of information which provides notification when items change
            in the collection.
            </summary>
            <remarks>
            Strongly-typed derived elements have access to the protected indexer on the class, 
            but clients of these classes will have to forcedly use the getters/setters, thus 
            the derived class is always in control of its state.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.IChangeNotification">
            <summary>
            Defines an event that is implemented by classes which offer
            notifications of data changes.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.IChangeNotification.Changed">
            <summary>
            Notifies subscribers that the state of the element has changed.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.StateElement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateElement.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.StateElement"/> class using the provided
            serialization information.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateElement.Remove(System.String)">
            <summary>
            Removes the item with the given key from the state.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateElement.RaiseStateChanged(System.String,System.Object,System.Object)">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.CompositeUI.StateElement.StateChanged"/> event for the given state key 
            (can be null if it is unknown).
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateElement.RaiseStateChanged(System.String,System.Object)">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.CompositeUI.StateElement.StateChanged"/> event for the given state key 
            (can be null if it is unknown).
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateElement.OnStateChanged(Microsoft.Practices.CompositeUI.StateChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.CompositeUI.StateElement.StateChanged"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateElement.Dispose">
            <summary>
            Free resources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateElement.Dispose(System.Boolean)">
            <summary>
            Called to free resources.
            </summary>
            <param name="disposing">Should be true when calling from Dispose().</param>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.StateElement.StateChanged">
            <summary>
            This event is raised when the state has changed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.StateElement.Item(System.String)">
            <summary>
            Gets and sets values on the state.
            </summary>
            <remarks>
            Derived classes must use this accessor in order to get the <see cref="E:Microsoft.Practices.CompositeUI.StateElement.StateChanged"/> fired. 
            This is made protected to force that pattern for strongly typed models, and forbid access to 
            the generic dictionary in those cases (unless the developer explicitly exposes a public 
            indexer as the <see cref="T:Microsoft.Practices.CompositeUI.State"/> class does).
            </remarks>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.StateElement.Microsoft#Practices#CompositeUI#IChangeNotification#Changed">
            <summary>
            Implemented explicitly to avoid confusion over which event to use at the State level.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.ModuleAttribute">
            <summary>
            Indicates that the assembly should be considered a named module using the
            provided name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.ModuleAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.ModuleAttribute"/> class using the
            provided module name.
            </summary>
            <param name="name">The name of the module.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.ModuleAttribute.Name">
            <summary>
            The name of the module.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic">
            <summary>
            Represents a point of communication on a certain topic between the topic publishers and the topic subscribers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.AddPublication(System.Object,System.String,Microsoft.Practices.CompositeUI.WorkItem,Microsoft.Practices.CompositeUI.EventBroker.PublicationScope)">
            <summary>
            Adds a publication to the topic.
            </summary>
            <param name="publisher">The object that publishes the event that will fire the topic.</param>
            <param name="eventName">The name of the event.</param>
            <param name="workItem">The <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> where the publisher is.</param>
            <param name="scope">A <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.PublicationScope"/> value which states scope for the publication.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.ContainsPublication(System.Object,System.String)">
            <summary>
            Checks if the specified publication has been registered with this <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.
            </summary>
            <param name="publisher">The object that contains the publication.</param>
            <param name="eventName">The name of event on the publisher that fires the topic.</param>
            <returns>true if the topic contains the requested publication; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.RemovePublication(System.Object,System.String)">
            <summary>
            Removes a publication from the topic.
            </summary>
            <param name="publisher">The object that contains the publication.</param>
            <param name="eventName">The name of event on the publisher that fires the topic.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.Fire(System.Object,System.EventArgs,Microsoft.Practices.CompositeUI.WorkItem,Microsoft.Practices.CompositeUI.EventBroker.PublicationScope)">
            <summary>
            Fires the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.
            </summary>
            <param name="sender">The object that acts as the sender of the event to the subscribers.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> instance to be passed to the subscribers.</param>
            <param name="workItem">The <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> where the object firing the event is.</param>
            <param name="scope">A <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.PublicationScope"/> value stating the scope of the firing behavior.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.AddSubscription(System.Object,System.String,Microsoft.Practices.CompositeUI.WorkItem,Microsoft.Practices.CompositeUI.EventBroker.ThreadOption)">
            <summary>
            Adds a subcription to this <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.
            </summary>
            <param name="subscriber">The object that contains the method that will handle the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.</param>
            <param name="handlerMethodName">The name of the method on the subscriber that will handle the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.</param>
            <param name="workItem">The <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> where the subscriber is.</param>
            <param name="threadOption">A <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.ThreadOption"/> value indicating how the handler method should be called.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.AddSubscription(System.Object,System.String,System.Type[],Microsoft.Practices.CompositeUI.WorkItem,Microsoft.Practices.CompositeUI.EventBroker.ThreadOption)">
            <summary>
            Adds a subcription to this <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.
            </summary>
            <param name="subscriber">The object that contains the method that will handle the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.</param>
            <param name="handlerMethodName">The name of the method on the subscriber that will handle the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.</param>
            <param name="workItem">The <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> where the subscriber is.</param>
            <param name="threadOption">A <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.ThreadOption"/> value indicating how the handler method should be called.</param>
            <param name="parameterTypes">Defines the types and order of the parameters for the subscriber. For none pass null.
            Use this overload when there are several methods with the same name on the subscriber.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.RemoveSubscription(System.Object,System.String)">
            <summary>
            Removes a subscription from this <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.
            </summary>
            <param name="subscriber">The object that contains the method that will handle the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.</param>
            <param name="handlerMethodName">The name of the method on the subscriber that will handle the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.ContainsSubscription(System.Object,System.String)">
            <summary>
            Checks if the specified subscription has been registered with this <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.
            </summary>
            <param name="subscriber">The object that contains the method that will handle the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.</param>
            <param name="handlerMethodName">The name of the method on the subscriber that will handle the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.</param>
            <returns>true, if the topic contains the subscription; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.Clean">
            <summary>
            Perform a sanity cleaning of the dead references to publishers and subscribers
            </summary>
            <devdoc>As the topic maintains <see cref="T:System.WeakReference"/> to publishers and subscribers,
            those instances that are finished but hadn't been removed from the topic will leak. This method
            deals with that case.</devdoc>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.Dispose">
            <summary>
            Called to free resources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.Dispose(System.Boolean)">
            <summary>
            Called to free resources.
            </summary>
            <param name="disposing">Should be true when calling from Dispose().</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.OnBuiltUp(System.String)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilderAware.OnBuiltUp(System.String)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.OnTearingDown">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilderAware.OnTearingDown"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.TraceSource">
            <summary>
            Sets the <see cref="P:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.TraceSource"/> to use for information tracing.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.Name">
            <summary>
            Gets the topic name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.Enabled">
            <summary>
            Gets or sets the enabled state of the topic. A disable topic will not fire events.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.PublicationCount">
            <summary>
            Gets the count of registered publications with this <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.EventTopic.SubscriptionCount">
            <summary>
            Gets the count of registered subscriptions to this <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapterMapService">
            <summary>
            This is the <see cref="T:Microsoft.Practices.CompositeUI.Commands.ICommandAdapterMapService"/> default implementation.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Commands.ICommandAdapterMapService">
            <summary>
            Services that implement this interface are used to associate an invoker type
            with a <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> type. 
            </summary>
            <remarks>
            This service is used by the <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> to
            create the correct adapter for a given invoker.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.ICommandAdapterMapService.Register(System.Type,System.Type)">
            <summary>
            Registers an adapter type to be created for the specified invoker type.
            </summary>
            <param name="invokerType">The invoker type to associate with the specified adapter type. 
            This type can be any type.</param>
            <param name="adapterType">Any type implementing the <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> interface.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.ICommandAdapterMapService.CreateAdapter(System.Type)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> instance for the specified invoker type.
            </summary>
            <param name="invokerType">The invoker type to create an adapter for.</param>
            <returns>A new <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> instance for the registered invoker;
            null if there is no adapter registration for the required invoker type.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.ICommandAdapterMapService.UnRegister(System.Type)">
            <summary>
            Removes the adapter registration for the specified invoker type.
            </summary>
            <param name="invokerType">The invoker type to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.CommandAdapterMapService.Register(System.Type,System.Type)">
            <summary>
            Registers an adapter type to be created for the specified invoker type.
            </summary>
            <param name="invokerType">The invoker type to associate with the specified adapter type. 
            This type can be any type.</param>
            <param name="adapterType">Any type implementing the <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> interface.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.CommandAdapterMapService.CreateAdapter(System.Type)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> instance for the specified invoker type.
            </summary>
            <param name="invokerType">The invoker type to create an adapter for.</param>
            <returns>A new <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> instance for the registered invoker;
            null if there is no adapter registration for the required invoker type.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.CommandAdapterMapService.UnRegister(System.Type)">
            <summary>
            Removes the adapter registration for the specified invoker type.
            </summary>
            <param name="invokerType">The invoker type to remove.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfoProvider">
            <summary>
            Interface to be implemented by smart parts that contain their own 
            <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo"/> components.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfoProvider.GetSmartPartInfo(System.Type)">
            <summary>
            Tries to retrieve smart part information compatible with type 
            smartPartInfoType.
            </summary>
            <param name="smartPartInfoType">Type of information to retrieve.</param>
            <returns>The <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo"/> instance or null if none exists in the smart part.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.ModuleInit">
            <summary>
            A default implementation of the <see cref="T:Microsoft.Practices.CompositeUI.IModule"/> interface.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.IModule">
            <summary>
            Defines a set of methods to be implemented by modules deployed in the application.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.IModule.AddServices">
            <summary>
            Allows the module to add services to the root <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> on startup.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.IModule.Load">
            <summary>
            Allows the module to be notified that it has been loaded.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.ModuleInit.AddServices">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeUI.IModule.AddServices"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.ModuleInit.Load">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeUI.IModule.Load"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopicException">
            <summary>
            An <see cref="T:System.Exception"/> thrown by the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> when exceptions occurs
            on its subscriptions during a firing sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopicException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopicException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopicException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopicException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopicException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventTopicException.#ctor(Microsoft.Practices.CompositeUI.EventBroker.EventTopic,System.Collections.ObjectModel.ReadOnlyCollection{System.Exception})">
            <summary>
            Initializes a new instance with the specified list of exceptions.
            </summary>
            <param name="exceptions">The list of exceptions that occurred during the subscribers invocation.</param>
            <param name="topic">The <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> instance whose subscribers incurred into an exception.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.EventTopicException.Exceptions">
            <summary>
            Gets the list of exceptions that occurred during the subscribers invocation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.EventTopicException.Topic">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> which incurred into errors.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.ServiceDependencyAttribute">
            <summary>
            Indicates that property or parameter is a dependency on a service and
            should be dependency injected when the class is put into a <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.OptionalDependencyAttribute">
            <summary>
            Base class for dependency attributes that can be made optional.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.OptionalDependencyAttribute.CreateParameter(System.Type)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.ParameterAttribute.CreateParameter(System.Type)"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.OptionalDependencyAttribute.Required">
            <summary>
            Whether the dependency is required. Defaults to true.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.ServiceDependencyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.ServiceDependencyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.ServiceDependencyAttribute.CreateParameter(System.Type)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.ParameterAttribute.CreateParameter(System.Type)"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.ServiceDependencyAttribute.Type">
            <summary>
            Gets or sets the type of the service the property expects.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.CabVisualizer">
            <summary>
            Base class for the CAB visualizer system.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.IVisualizer">
            <summary>
            The interface to be implemented by a visualizer in CAB.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.IVisualizer.Initialize(Microsoft.Practices.CompositeUI.WorkItem,Microsoft.Practices.ObjectBuilder.Builder)">
            <summary>
            Initializes the visualizer.
            </summary>
            <param name="cabRootWorkItem">The root <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> of the <see cref="T:Microsoft.Practices.CompositeUI.CabApplication`1"/>.</param>
            <param name="cabBuilder">The <see cref="T:Microsoft.Practices.ObjectBuilder.Builder"/> used by the <see cref="T:Microsoft.Practices.CompositeUI.CabApplication`1"/>.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.IVisualizer.CabBuilder">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.ObjectBuilder.Builder"/> used by the CAB application.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.IVisualizer.CabRootWorkItem">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> that is the root of the CAB application hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabVisualizer.Initialize(Microsoft.Practices.CompositeUI.WorkItem,Microsoft.Practices.ObjectBuilder.Builder)">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeUI.IVisualizer.Initialize(Microsoft.Practices.CompositeUI.WorkItem,Microsoft.Practices.ObjectBuilder.Builder)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabVisualizer.CreateVisualizationShell">
            <summary>
            May be overridden in derived class to create the main shell of the visualizer.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabVisualizer.AddBuilderStrategies(Microsoft.Practices.ObjectBuilder.Builder)">
            <summary>
            May be overridden in a derived class to add strategies to the <see cref="T:Microsoft.Practices.ObjectBuilder.Builder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabVisualizer.AddServices">
            <summary>
            May be overridden in a derived class to add services to visualizer's root <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabVisualizer.Dispose">
            <summary>
            See <see cref="M:System.IDisposable.Dispose"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabVisualizer.Dispose(System.Boolean)">
            <summary>
            Called to free resources.
            </summary>
            <param name="disposing">Should be true when calling from Dispose().</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabVisualizer.AddNewVisualization``1">
            <summary>
            Adds a new visualization to the visualizer.
            </summary>
            <typeparam name="TVisualization">The type of the visualization to make.</typeparam>
            <returns>The new visualization.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabVisualizer.AddNewVisualization(System.Type)">
            <summary>
            Adds a new visualization to the visualizer.
            </summary>
            <param name="type">The type of the visualization to make.</param>
            <returns>The new visualization.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.CabVisualizer.Visualizations">
            <summary>
            Returns all of the visualizations in the visualizer
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.CabVisualizer.Configuration">
            <summary>
            Loads the configuration section for the visualizer
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.CabVisualizer.CabBuilder">
            <summary>
            See <see cref="P:Microsoft.Practices.CompositeUI.IVisualizer.CabRootWorkItem"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.CabVisualizer.CabRootWorkItem">
            <summary>
            See <see cref="P:Microsoft.Practices.CompositeUI.IVisualizer.CabRootWorkItem"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.CabVisualizer.RootWorkItem">
            <summary>
            Returns the root <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> for the Visualizer hierarchy.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Utility.Guard">
            <summary>
            Common guard clauses
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.Guard.ArgumentNotNullOrEmptyString(System.String,System.String)">
            <summary>
            Checks a string argument to ensure it isn't null or empty
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.Guard.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Checks an argument to ensure it isn't null
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.Guard.EnumValueIsDefined(System.Type,System.Object,System.String)">
            <summary>
            Checks an Enum argument to ensure that its value is defined by the specified Enum type.
            </summary>
            <param name="enumType">The Enum type the value should correspond to.</param>
            <param name="value">The value to check for.</param>
            <param name="argumentName">The name of the argument holding the value.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.Guard.TypeIsAssignableFromType(System.Type,System.Type,System.String)">
            <summary>
            Verifies that an argument type is assignable from the provided type (meaning
            interfaces are implemented, or classes exist in the base class hierarchy).
            </summary>
            <param name="assignee">The argument type.</param>
            <param name="providedType">The type it must be assignable from.</param>
            <param name="argumentName">The argument name.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.ModuleLoaderService">
            <summary>
            Service to load modules into the application.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.IModuleLoaderService">
            <summary>
            Service that performs module loading.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IModuleLoaderService.Load(Microsoft.Practices.CompositeUI.WorkItem,Microsoft.Practices.CompositeUI.Configuration.IModuleInfo[])">
            <summary>
            Loads the specified list of modules.
            </summary>
            <param name="workItem">The <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> that will host the modules.</param>
            <param name="modules">The list of modules to load.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IModuleLoaderService.Load(Microsoft.Practices.CompositeUI.WorkItem,System.Reflection.Assembly[])">
            <summary>
            Loads assemblies as modules.
            </summary>
            <param name="workItem">The <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> that will host the modules.</param>
            <param name="assemblies">The list of assemblies to load as modules.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.IModuleLoaderService.LoadedModules">
            <summary>
            Returns a list of the loaded modules.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.Services.IModuleLoaderService.ModuleLoaded">
            <summary>
            The event that is fired when a module has been loaded by the service.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleLoaderService.#ctor(System.Diagnostics.TraceSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.Services.ModuleLoaderService"/> class with the
            provided trace source.
            </summary>
            <param name="traceSource">The trace source for tracing. If null is
            passed, the service does not perform tracing.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleLoaderService.Load(Microsoft.Practices.CompositeUI.WorkItem,Microsoft.Practices.CompositeUI.Configuration.IModuleInfo[])">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeUI.Services.IModuleLoaderService.Load(Microsoft.Practices.CompositeUI.WorkItem,Microsoft.Practices.CompositeUI.Configuration.IModuleInfo[])"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleLoaderService.Load(Microsoft.Practices.CompositeUI.WorkItem,System.Reflection.Assembly[])">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeUI.Services.IModuleLoaderService.Load(Microsoft.Practices.CompositeUI.WorkItem,System.Reflection.Assembly[])"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleLoaderService.OnModuleLoaded(Microsoft.Practices.CompositeUI.Services.LoadedModuleInfo)">
            <summary>
            Fires the ModuleLoaded event.
            </summary>
            <param name="module">The module that was loaded.</param>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.Services.ModuleLoaderService.ModuleLoaded">
            <summary>
            See <see cref="E:Microsoft.Practices.CompositeUI.Services.IModuleLoaderService.ModuleLoaded"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.ModuleLoaderService.LoadedModules">
            <summary>
            See <see cref="P:Microsoft.Practices.CompositeUI.Services.IModuleLoaderService.LoadedModules"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleLoaderService.ClassNameTraceSourceAttribute.#ctor">
            <summary>
            Initializes the attribute using the <see cref="T:Microsoft.Practices.CompositeUI.Services.IModuleLoaderService"/> 
            interface namespace as the source name.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.CabShellApplication`2">
            <summary>
            Extends <see cref="T:Microsoft.Practices.CompositeUI.CabApplication`1"/> to support applications with a shell.
            </summary>
            <typeparam name="TWorkItem">The type of the root application work item.</typeparam>
            <typeparam name="TShell">The type of the shell the application uses.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.CabApplication`1">
            <summary>
            Defines the <see cref="T:Microsoft.Practices.CompositeUI.CabApplication`1"/> as an application having a well known lifecycle
            and a root <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> instance providing the scope for the application.
            </summary>
            <typeparam name="TWorkItem">The type of the root application work item.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabApplication`1.Run">
            <summary>
            Starts the application.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabApplication`1.AddServices">
            <summary>
            May be overridden in a derived class to add specific services required by the application
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabApplication`1.CreateVisualizer">
            <summary>
            May be overriden in a derived class to provide a visualizer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabApplication`1.OnRootWorkItemInitialized">
            <summary>
            May be overridden in a derived class to perform work after the root <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> has
            been fully initialized.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabApplication`1.AddBuilderStrategies(Microsoft.Practices.ObjectBuilder.Builder)">
            <summary>
            May be overridden in a derived class to add strategies to the <see cref="T:Microsoft.Practices.ObjectBuilder.Builder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabApplication`1.Start">
            <summary>
            Must be overriden. This method is called when the application is fully created and
            ready to run.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabApplication`1.OnUnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            May be overridden in a derived class to be notified of any unhandled exceptions
            in the <see cref="T:System.AppDomain"/>. If the application is started with a debugger,
            this will not be called, so that the normal debugger handling of exceptions
            can be used.
            </summary>
            <param name="sender">unused</param>
            <param name="e">The exception event information</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.CabApplication`1.VisualizerType">
            <summary>
            Sets the visualizer type to be used for the application; if set to null, will turn
            off visualizer support (even if visualizations are configured in App.config).
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.CabApplication`1.Configuration">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.CompositeUI.Configuration.SettingsSection"/> that controls the configuration for this <see cref="T:Microsoft.Practices.CompositeUI.CabApplication`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.CabApplication`1.RootWorkItem">
            <summary>
            Returns the root <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> for the application.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabShellApplication`2.OnRootWorkItemInitialized">
            <summary>
            Creates the shell.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabShellApplication`2.BeforeShellCreated">
            <summary>
            May be overridden in derived classes to perform activities just before the shell
            is created.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CabShellApplication`2.AfterShellCreated">
            <summary>
            May be overridden in derived classes to perform activities just after the shell
            has been created.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.CabShellApplication`2.Shell">
            <summary>
            Returns the shell that was created. Will not be valid until <see cref="M:Microsoft.Practices.CompositeUI.CabShellApplication`2.AfterShellCreated"/>
            has been called.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.UIElements.UIElementAdapterFactoryCatalog">
            <summary>
            Catalog that keeps track of each <see cref="T:Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapterFactory"/> that is available.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapterFactoryCatalog">
            <summary>
            Catalog that keeps track of what factories are available.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapterFactoryCatalog.GetFactory(System.Object)">
            <summary>
            Retrieves a factory for the given UI element.
            </summary>
            <param name="element">The UI element to lookup a factory for.</param>
            <returns>A factory to use to create <see cref="T:Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapter"/> for the UI element.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapterFactoryCatalog.RegisterFactory(Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapterFactory)">
            <summary>
            Adds an entry in the factories dictionary.
            </summary>
            <param name="factory">The factory to register with the catalog.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapterFactoryCatalog.Factories">
            <summary>
            Dictionary of the availble factories.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIElements.UIElementAdapterFactoryCatalog.RegisterFactory(Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapterFactory)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapterFactory"/> to the catalog.
            </summary>
            <param name="adapterFactory">The factory to add.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIElements.UIElementAdapterFactoryCatalog.GetFactory(System.Object)">
            <summary>
            Retrieves a <see cref="T:Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapterFactory"/> for the given UI Element.
            </summary>
            <param name="element">The UI Element a factory is to be retrieved for.</param>
            <returns>The factory for the UI Element.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.UIElements.UIElementAdapterFactoryCatalog.Factories">
            <summary>
            Gets the list that includes each registered <see cref="T:Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapterFactory"/> in the catalog.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.StateChangedEventArgs">
            <summary>
            Provides data for a StateChanged event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateChangedEventArgs.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.StateChangedEventArgs"/> class using the
            provided key and new value.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.StateChangedEventArgs"/> class using the
            provided key, new value, and old value.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.StateChangedEventArgs.Key">
            <summary>
            Gets and sets the changed <see cref="T:Microsoft.Practices.CompositeUI.State"/> item key.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.StateChangedEventArgs.NewValue">
            <summary>
            Gets and sets the <see cref="T:Microsoft.Practices.CompositeUI.State"/> item's new value.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.StateChangedEventArgs.OldValue">
            <summary>
            Gets and sets the <see cref="T:Microsoft.Practices.CompositeUI.State"/> item's old value.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.State">
            <summary>
            Provides a dictionary of information which provides notification when items change
            in the collection. It is serialized with the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> when the
            <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> is saved and loaded.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.State.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.State"/> class using a random ID.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.State.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.State"/> class using the provided ID.
            </summary>
            <param name="id">The ID for the state.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.State.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.State"/> class using the provided
            serialization information.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.State.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data
            needed to serialize the target object.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            for this serialization.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.State.AcceptChanges">
            <summary>
            Resets the <see cref="P:Microsoft.Practices.CompositeUI.State.HasChanges"/> flag.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.State.OnStateChanged(Microsoft.Practices.CompositeUI.StateChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.CompositeUI.StateElement.StateChanged"/> event and sets the <see cref="P:Microsoft.Practices.CompositeUI.State.HasChanges"/> flag to true.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.State.TraceSource">
            <summary>
            Sets the <see cref="P:Microsoft.Practices.CompositeUI.State.TraceSource"/> to use for tracing messages.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.State.Item(System.String)">
            <summary>
            Gets and sets the value of an element in the state.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.State.HasChanges">
            <summary>
            Gets whether the state has changed since it was initially created or 
            the last call to <see cref="M:Microsoft.Practices.CompositeUI.State.AcceptChanges"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.State.ID">
            <summary>
            Gets the state ID.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.SmartParts.SmartPartAttribute">
            <summary>
            This attribute flags an object as a smart part.
            The smart part will then be added to the WorkItem.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.IAuthenticationService">
            <summary>
            Service that performs the authentication of the current user.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IAuthenticationService.Authenticate">
            <summary>
            This method is expected to set the appropriate 
            implementation of an <see cref="T:System.Security.Principal.IPrincipal"/> on the thread 
            and optionally call <see cref="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)"/> and <see cref="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.StreamStatePersistenceService">
            <summary>
            Implements simple file based <see cref="T:Microsoft.Practices.CompositeUI.Services.IStatePersistenceService"/> that stores
            <see cref="T:Microsoft.Practices.CompositeUI.State"/> data in binary files using the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> serializer.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.IStatePersistenceService">
            <summary>
            Service that stores and retrieves the <see cref="T:Microsoft.Practices.CompositeUI.State"/> data to and from 
            a persistence storage.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IStatePersistenceService.Save(Microsoft.Practices.CompositeUI.State)">
            <summary>
            Saves the state to the persistence storage.
            </summary>
            <param name="state">The <see cref="T:Microsoft.Practices.CompositeUI.State"/> to store.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IStatePersistenceService.Load(System.String)">
            <summary>
            Retrieves the saved state from the persistence storage.
            </summary>
            <param name="id">The id of the state to retrieve the state for.</param>
            <returns>The <see cref="T:Microsoft.Practices.CompositeUI.State"/> instance created from the store.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IStatePersistenceService.Remove(System.String)">
            <summary>
            Removes the state from the persistence storage.
            </summary>
            <param name="id">The id of the state to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IStatePersistenceService.Contains(System.String)">
            <summary>
            Checks if the persistence services has the state with the specified
            id in its storage.
            </summary>
            <param name="id">The id of the state to look for.</param>
            <returns>true if the state is persisted in the storage; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.IConfigurable">
            <summary>
            Defines a method implemented by classes that can receive configuration through
            name/value pairs in the settings file.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.IConfigurable.Configure(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Configures the component with the received settings.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.Services.StreamStatePersistenceService.UseCryptographyAttribute">
            <summary>
            Configuration attribute that can be passed to the <see cref="M:Microsoft.Practices.CompositeUI.IConfigurable.Configure(System.Collections.Specialized.NameValueCollection)"/> implementation 
            on the service, to determine whether cryptography must be used for persistence. It must be a 
            key in the dictionary with the name <c>UseCryptography</c>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.StreamStatePersistenceService.Save(Microsoft.Practices.CompositeUI.State)">
            <summary>
            Saves the <see cref="T:Microsoft.Practices.CompositeUI.State"/> to the persistence storage.
            </summary>
            <param name="state">The <see cref="T:Microsoft.Practices.CompositeUI.State"/> to store.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.StreamStatePersistenceService.Load(System.String)">
            <summary>
            Retrieves the saved <see cref="T:Microsoft.Practices.CompositeUI.State"/> from the persistence storage.
            </summary>
            <param name="id">The id of the <see cref="T:Microsoft.Practices.CompositeUI.State"/> to retrieve.</param>
            <returns>The <see cref="T:Microsoft.Practices.CompositeUI.State"/> instance created from the store.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.StreamStatePersistenceService.Remove(System.String)">
            <summary>
            Removes the <see cref="T:Microsoft.Practices.CompositeUI.State"/> from the persistence storage.
            </summary>
            <param name="id">The id of the <see cref="T:Microsoft.Practices.CompositeUI.State"/> to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.StreamStatePersistenceService.Contains(System.String)">
            <summary>
            Checks if the persistence services has the <see cref="T:Microsoft.Practices.CompositeUI.State"/> with the specified
            id in its storage.
            </summary>
            <param name="id">The id of the <see cref="T:Microsoft.Practices.CompositeUI.State"/> to look for.</param>
            <returns>true if the <see cref="T:Microsoft.Practices.CompositeUI.State"/> is persisted in the storage; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.StreamStatePersistenceService.RemoveStream(System.String)">
            <summary>
            Removes the <see cref="T:Microsoft.Practices.CompositeUI.State"/> from the persistence storage.
            </summary>
            <param name="id">The id of the <see cref="T:Microsoft.Practices.CompositeUI.State"/> to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.StreamStatePersistenceService.GetStream(System.String)">
            <summary>
            Retrieves the <see cref="T:System.IO.Stream"/> to use as the storage for the <see cref="T:Microsoft.Practices.CompositeUI.State"/>.
            </summary>
            <param name="id">The identifier of the <see cref="T:Microsoft.Practices.CompositeUI.State"/> to retrieve.</param>
            <returns>The storage stream.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.StreamStatePersistenceService.GetStream(System.String,System.Boolean@)">
            <summary>
            Retrieves the <see cref="T:System.IO.Stream"/> to use as the storage for the <see cref="T:Microsoft.Practices.CompositeUI.State"/>, specifying whether the 
            stream should be disposed after usage.
            </summary>
            <param name="id">The identifier of the associated <see cref="T:Microsoft.Practices.CompositeUI.State"/>.</param>
            <param name="shouldDispose">A <see labgword="bool"/> value indicating if the stream will be 
            disposed after usage.</param>
            <returns>The storage stream.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.StreamStatePersistenceService.Configure(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Configures the <see cref="T:Microsoft.Practices.CompositeUI.Services.StreamStatePersistenceService"/> using the settings provided
            by the provided settings collection.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.StreamStatePersistenceService.CryptographyService">
            <summary>
            The <see cref="T:Microsoft.Practices.CompositeUI.Services.ICryptographyService"/> used to protect sensitive data.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.IModuleEnumerator">
            <summary>
            Defines a class that can process module information to enumerate a list of modules.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IModuleEnumerator.EnumerateModules">
            <summary>
            Gets an array of <see cref="T:Microsoft.Practices.CompositeUI.Configuration.IModuleInfo"/> enumerated from the source the
            enumerator is processing.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Practices.CompositeUI.Configuration.IModuleInfo"/> instances.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Commands.Command">
            <summary>
            Represents a command that can be fired by several UI Elements.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.Command.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.Command.AddCommandAdapter(Microsoft.Practices.CompositeUI.Commands.CommandAdapter)">
            <summary>
            Registers a <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> with this command.
            </summary>
            <param name="adapter">The <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> to register with this <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.Command.RemoveCommandAdapter(Microsoft.Practices.CompositeUI.Commands.CommandAdapter)">
            <summary>
            Removes the <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> from this command.
            </summary>
            <param name="adapter">The <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> to remove from this <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.Command.Execute">
            <summary>
            Executes this <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> by firing the <see cref="E:Microsoft.Practices.CompositeUI.Commands.Command.ExecuteAction"/> event.
            </summary>
            <remarks>The event will only be fired when the command's status is enabled.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.Command.FindAdapters``1">
            <summary>
            Returns a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> with the registered <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/>
            which are of the type specified by TAdapter.
            </summary>
            <typeparam name="TAdapter">The type of adapter to search for.</typeparam>
            <returns>A new instance of a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.Command.AddInvoker(System.Object,System.String)">
            <summary>
            Adds a new invoker for this <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/>.
            </summary>
            <remarks>The command will use the <see cref="T:Microsoft.Practices.CompositeUI.Commands.ICommandAdapterMapService"/> to create the 
            corresponding <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> for the specified invoker.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.Command.RemoveInvoker(System.Object,System.String)">
            <summary>
            Removes the invoker from the <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/>.
            </summary>
            <param name="invoker">An invoker object for the command.</param>
            <param name="eventName">The name of the event on the invoker object that fires 
            this <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/>.</param>
            <remarks>This method removes the invoker from all the <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> 
            registered with this <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/>.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.Command.OnExecuteAction(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:Microsoft.Practices.CompositeUI.Commands.CommandAdapter.ExecuteCommand"/> event and fires the <see cref="E:Microsoft.Practices.CompositeUI.Commands.Command.ExecuteAction"/>
            event accordingly.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments of the event.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.Command.OnChanged">
            <summary>
            Fires the <see cref="E:Microsoft.Practices.CompositeUI.Commands.Command.Changed"/> event for this command.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.Command.Dispose">
            <summary>
            Removes all the adapters from the command before disposing it.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.Command.Dispose(System.Boolean)">
            <summary>
            Called to free resources.
            </summary>
            <param name="disposing">Should be true when calling from Dispose().</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.Command.OnBuiltUp(System.String)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilderAware.OnBuiltUp(System.String)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.Command.OnTearingDown">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilderAware.OnTearingDown"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Commands.Command.MapService">
            <summary>
            This service is used by <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> to create adapters for its invokers.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Commands.Command.TraceSource">
            <summary>
            Used by injection to set the <see cref="P:Microsoft.Practices.CompositeUI.Commands.Command.TraceSource"/> to use for tracing.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.Commands.Command.Changed">
            <summary>
            This event signals that some of the command's properties have changed.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.Commands.Command.ExecuteAction">
            <summary>
            This event signals that this <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> is executed. Handle this event to implement the
            actions to be executed when the command is fired.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Commands.Command.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Commands.Command.Status">
            <summary>
            Gets or sets the status of the <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/>, which controls the 
            visible/enabled behavior of both the <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> and 
            its associated UI elements.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Commands.Command.Adapters">
            <summary>
            Returns a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> with the registered <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopicFireDelegate">
            <summary>
            Represents the signature for the subscription objects to get called from the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> during
            a firing sequence.
            </summary>
            <param name="sender">The publisher object firing the topic.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> data to be passed to the subscribers.</param>
            <param name="exceptions">An <see cref="T:System.Exception"/> list where a <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.Subscription"/> should 
            register the exceptions that might occur when executing the subcription code.</param>
            <param name="traceSource">The <see cref="T:System.Diagnostics.TraceSource"/> to use for reporting information.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Commands.CommandException">
            <summary>
            An exception thrown by the <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.CommandException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.CommandException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.CommandException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.CommandException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2">
            <summary>
            Provides a read-only implementation of <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2"/>
            class using the specified dictionary as the base.
            </summary>
            <param name="innerDictionary"></param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
            <summary>
            This method is not implemented.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the ReadOnlyDictionary{TKey,TValue} contains a specific key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
            <summary>
            This method is not implemented.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Clear"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the 
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the value associated with the specified key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2.Count">
            <summary>
            Returns the number of elements in the <see cref="T:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2"/>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.BuilderStrategies.CommandStrategy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder.BuilderStrategy"/> that processes commands associated 
            with component members through the <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandHandlerAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.BuilderStrategies.CommandStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            Inspects the object for command handler declarations registering them with the 
            corresponding <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.BuilderStrategies.CommandStrategy.TearDown(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Object)">
            <summary>
            Inspects the object for command handler declarations unregistering them from the 
            corresponding command.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.FileStatePersistenceService">
            <summary>
            Implements simple file based <see cref="T:Microsoft.Practices.CompositeUI.Services.IStatePersistenceService"/> that stores
            the state in binary files using the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> serializer.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.FileStatePersistenceService.#ctor">
            <summary>
            Initializes the service with the default folder location being the 
            current <see cref="P:System.AppDomain.BaseDirectory"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.FileStatePersistenceService.#ctor(System.String)">
            <summary>
            Initializes the service specifying the root folder to use for the persisted state.
            </summary>
            <param name="basePath">Root folder for the persisted state.</param>
            <remarks>
            If the basePath is a relative path, it will be resolved relative to 
            the <see cref="P:System.AppDomain.BaseDirectory"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.FileStatePersistenceService.Contains(System.String)">
            <summary>
            Determines whether the file associated with the given state id exists.
            </summary>
            <param name="id">Identifier of the state.</param>
            <returns>true if the file exists; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.FileStatePersistenceService.RemoveStream(System.String)">
            <summary>
            Removes the file associated with the given state id.
            </summary>
            <param name="id">Identifier of the state to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.FileStatePersistenceService.GetStream(System.String)">
            <summary>
            Retrieves the storage file <see cref="T:System.IO.Stream"/>associated with the given state id.
            </summary>
            <param name="id">Identitier of the state.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.FileStatePersistenceService.BasePath">
            <summary>
            Specifies the root folder for the persisted state.
            </summary>
            <remarks>
            If the value is a relative path, it will be resolved relative to 
            the <see cref="P:System.AppDomain.BaseDirectory"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.EventBroker.EventInspector">
            <summary>
            Inspects objects for event publications and subscriptions,
            registering and unregistering the publishers and subscribers with the corresponding <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventInspector.Register(System.Object,Microsoft.Practices.CompositeUI.WorkItem)">
            <summary>
            Processes an object by scanning its members and registering publications 
            and subscriptions.
            </summary>
            <param name="item">The object to scan.</param>
            <param name="workItem">The <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> where the object is.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventInspector.Unregister(System.Object,Microsoft.Practices.CompositeUI.WorkItem)">
            <summary>
            Processes an object by scanning its members and unregistering publications 
            and subscriptions.
            </summary>
            <param name="item">The object to scan.</param>
            <param name="workItem">The <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> where the object is.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.EventBroker.PublicationScope">
            <summary>
            Defines the scope for a publication of an <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.EventBroker.PublicationScope.Global">
            <summary>
            Indicates that the topic should be fired on all the <see cref="F:Microsoft.Practices.CompositeUI.EventBroker.PublicationScope.WorkItem"/> instances,
            regarding where the publication firing occurred.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.EventBroker.PublicationScope.WorkItem">
            <summary>
            Indicates that the topic should be fired only in the <see cref="F:Microsoft.Practices.CompositeUI.EventBroker.PublicationScope.WorkItem"/> instance where 
            the publication firing occurred.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.EventBroker.PublicationScope.Descendants">
            <summary>
            Indicates that the topic should be fired in the <see cref="F:Microsoft.Practices.CompositeUI.EventBroker.PublicationScope.WorkItem"/> instance where 
            the publication firing occurred, and in all the <see cref="F:Microsoft.Practices.CompositeUI.EventBroker.PublicationScope.WorkItem"/> descendants.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Configuration.SolutionProfileReaderException">
            <summary>
            An exception thrown by the <see cref="T:Microsoft.Practices.CompositeUI.Configuration.SolutionProfileReader"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.SolutionProfileReaderException.#ctor">
            <summary>
            Initializes a new instance of the System.Exception class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.SolutionProfileReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.SolutionProfileReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.SolutionProfileReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the System.Exception class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.UIExtensionSiteCollection">
            <summary>
            Represents a named collection of sites for UI elements.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIExtensionSiteCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.UIExtensionSiteCollection"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIExtensionSiteCollection.#ctor(Microsoft.Practices.CompositeUI.WorkItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.UIExtensionSiteCollection"/> class using the provided
            root <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIExtensionSiteCollection.#ctor(Microsoft.Practices.CompositeUI.UIExtensionSiteCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.UIExtensionSiteCollection"/> class using the provided
            parent <see cref="T:Microsoft.Practices.CompositeUI.UIExtensionSiteCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIExtensionSiteCollection.Contains(System.String)">
            <summary>
            Determines whether an extension site is available.
            </summary>
            <param name="siteName">The site name to find.</param>
            <returns>true if the site is available; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIExtensionSiteCollection.RegisterSite(System.String,System.Object)">
            <summary>
            Registers a site for the given UI element by asking the adapter factory to
            automatically allocate an adapter based on the element type.
            </summary>
            <param name="siteName">The site name to register.</param>
            <param name="uiElement">The UI element.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIExtensionSiteCollection.RegisterSite(System.String,Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapter)">
            <summary>
            Registers a site using the given adapter.
            </summary>
            <param name="siteName">The site name to register.</param>
            <param name="adapter">The UI element adapter for the site.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIExtensionSiteCollection.UnregisterSite(System.String)">
            <summary>
            Unregisters a site.
            </summary>
            <param name="siteName">The site name to unregister.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIExtensionSiteCollection.Dispose">
            <summary>
            See <see cref="M:System.IDisposable.Dispose"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIExtensionSiteCollection.Dispose(System.Boolean)">
            <summary>
            See <see cref="M:System.IDisposable.Dispose"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.UIExtensionSiteCollection.Item(System.String)">
            <summary>
            Retrieves an extension site by name.
            </summary>
            <param name="siteName">The name of the extension site to get.</param>
            <returns>The extension site.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.UIExtensionSiteCollection.Count">
            <summary>
            Returns a count of the available extension sites.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.SmartParts.SmartPartPlaceHolderEventArgs">
            <summary>
            Used by the the smartpart placeholder.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.SmartPartPlaceHolderEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.SmartPartPlaceHolderEventArgs"/> using
            the specified SmartPart.
            </summary>
            <param name="smartPart"></param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.SmartParts.SmartPartPlaceHolderEventArgs.SmartPart">
            <summary>
            Gets the SmartPart associated with this event.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Configuration.ParametersElement">
            <summary>
            Base class for those configuration elements that support receiving 
            arbitrary name-value pairs through configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.Configuration.ParametersElement.dynamicProperties">
            <summary>
            Properties we're creating on the fly as unrecognized attributes appear.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ParametersElement.#ctor">
            <summary>
            Constructor for use by derived classes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ParametersElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Create a new property on the fly for the attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.ParametersElement.Properties">
            <summary>
            Retrieves the accumulated properties for the element, which include 
            the dynamically generated ones.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.ParametersElement.Parameters">
            <summary>
            Parameters received by the element as attributes in the configuration file.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.EventBroker.ThreadOption">
            <summary>
            Specifies on which <see cref="T:System.Threading.Thread"/> an <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> subscriber will be called.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.EventBroker.ThreadOption.Publisher">
            <summary>
            The call is done on the same <see cref="T:System.Threading.Thread"/> on which the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> was fired.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.EventBroker.ThreadOption.Background">
            <summary>
            The call is done asynchronously on a background <see cref="T:System.Threading.Thread"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.EventBroker.ThreadOption.UserInterface">
            <summary>
            The call is done is done on the UI <see cref="T:System.Threading.Thread"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Configuration.ConfigurationException">
            <summary>
            An exception thrown by the configuration classes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the System.Exception class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the System.Exception class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Commands.EventTopicCommand">
            <summary>
            Defines a <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> that fires an <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> when
            it is executed
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.EventTopicCommand.OnExecuteAction(System.Object,System.EventArgs)">
            <summary>
            Executes the command and fires the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/>.
            </summary>
            <param name="sender">The sender for the <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> handlers
            and the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> subscriptions.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> for the <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> handlers and
            the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> subscriptions.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Commands.EventTopicCommand.WorkItem">
            <summary>
            The <see cref="P:Microsoft.Practices.CompositeUI.Commands.EventTopicCommand.WorkItem"/> that contains this command.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Commands.EventTopicCommand.Scope">
            <summary>
            The <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.PublicationScope"/> the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> will be fired with.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Commands.AdapterMapServiceException">
            <summary>
            An <see cref="T:System.Exception"/> thrown by the <see cref="T:Microsoft.Practices.CompositeUI.Commands.ICommandAdapterMapService"/> implementations.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.AdapterMapServiceException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.AdapterMapServiceException.#ctor(System.String)">
            <summary>
            Initializes a new instance ith a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.AdapterMapServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.AdapterMapServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2">
            <summary>
            Default base implementation of the <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace"/> interface.
            </summary>
            <remarks>
            Implements the common behavior for Workspaces, which includes activating the smart part 
            when it is shown, retrieving registered <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo"/> components from the 
            <see cref="P:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.WorkItem"/>, and raising the 
            appropriate events when needed.
            </remarks>
            <typeparam name="TSmartPart">Type of smart parts that the workspace manages.</typeparam>
            <typeparam name="TSmartPartInfo">Type of smart part information used by the workspace. 
            Must implement <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo"/>.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.SetActiveSmartPart(System.Object)">
            <summary>
            Allows a derived class to set the Active SmartPart in the Workspace
            </summary>
            <remarks>
            If a derived class is directly setting the value, it must be 
            of a supported type, and must have been shown previously.
            </remarks>
            <param name="value">The SmartPart is set as the <see cref="P:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.ActiveSmartPart"/></param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.Activate(System.Object)">
            <summary>
            Activates the smartPart on the workspace.
            </summary>
            <param name="smartPart">The smart part to activate.</param>
            <exception cref="T:System.ArgumentException">The smartPart
            was not previously shown in the workspace.</exception>
            <exception cref="T:System.ArgumentException">The smartPart cannot be 
            assigned to TSmartPart.</exception>
            <remarks>
            <see cref="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.OnActivate(`0)"/> and <see cref="E:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.SmartPartActivated"/> 
            wil only be called if the smartPart is different than the 
            <see cref="P:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.ActiveSmartPart"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.ApplySmartPartInfo(System.Object,Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo)">
            <summary>
            Applies the smartPartInfo to the smartPart.
            </summary>
            <exception cref="T:System.ArgumentException">The smartPart
            was not previously shown in the workspace.</exception>
            <exception cref="T:System.ArgumentException">The smartPart cannot be 
            assigned to TSmartPart.</exception>
            <remarks>
            Applying the smartPartInfo does not cause automatic activation 
            of the smartPart.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.Show(System.Object,Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo)">
            <summary>
            Shows SmartPart using the given <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo"/>.
            </summary>
            <exception cref="T:System.ArgumentException">The smartPart cannot be 
            assigned to TSmartPart.</exception>
            <remarks>
            If the smartPart was previously shown, 
            <see cref="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.ApplySmartPartInfo(System.Object,Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo)"/> and <see cref="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.Activate(System.Object)"/> will be called. 
            Otherwise, <see cref="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.OnShow(`0,`1)"/> is called.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.Show(System.Object)">
            <summary>
            Locates an appropriate <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo"/> compatible with the type 
            TSmartPartInfo, and calls <see cref="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.Show(System.Object,Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo)"/>.
            </summary>
            <exception cref="T:System.ArgumentException">The smartPart cannot be 
            assigned to TSmartPart.</exception>
            <remarks>
            If <see cref="P:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.WorkItem"/> is not null, <see cref="M:Microsoft.Practices.CompositeUI.WorkItem.GetSmartPartInfo``1(System.Object)"/> will 
            be called for the TSmartPartInfo concrete type. If no value is returned, 
            it will be called again for a generic <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.SmartPartInfo"/>. Finally, if no generic info 
            is registered either, a new default instance of the TSmartPartInfo will 
            be used by calling the <see cref="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.CreateDefaultSmartPartInfo(`0)"/> method and finally passed to 
            the <see cref="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.Show(System.Object,Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo)"/> overload.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.Hide(System.Object)">
            <summary>
            Hides the smart part and resets (sets to null) the <see cref="P:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.ActiveSmartPart"/>.
            </summary>
            <exception cref="T:System.ArgumentException">The smartPart
            was not previously shown in the workspace.</exception>
            <exception cref="T:System.ArgumentException">The smartPart cannot be 
            assigned to TSmartPart.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.Close(System.Object)">
            <summary>
            Closes the smart part and resets (sets to null) the <see cref="P:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.ActiveSmartPart"/>.
            </summary>
            <exception cref="T:System.ArgumentException">The smartPart
            was not previously shown in the workspace.</exception>
            <exception cref="T:System.ArgumentException">The smartPart cannot be 
            assigned to TSmartPart.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.RaiseSmartPartActivated(System.Object)">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.SmartPartActivated"/> event.
            </summary>
            <param name="smartPart">The smart part that was activated.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.RaiseSmartPartClosing(System.Object)">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.SmartPartClosing"/> event.
            </summary>
            <param name="smartPart">The smart part that is being closed.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.RaiseSmartPartClosing(Microsoft.Practices.CompositeUI.SmartParts.WorkspaceCancelEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.SmartPartClosing"/> event using the specified 
            event argument.
            </summary>
            <param name="e">The arguments to pass to the event.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.RaiseSmartPartActivating(System.Object)">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.SmartPartActivating"/> event.
            </summary>
            <param name="smartPart">The smart part that is being activated.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.RaiseSmartPartActivating(Microsoft.Practices.CompositeUI.SmartParts.WorkspaceCancelEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.SmartPartActivating"/> event using the specified 
            event argument.
            </summary>
            <param name="e">The arguments to pass to the event.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.OnActivate(`0)">
            <summary>
            When overridden in a derived class, activates the smartPart
            on the workspace.
            </summary>
            <param name="smartPart">The smart part to activate.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.OnApplySmartPartInfo(`0,`1)">
            <summary>
            When overridden in a derived class, applies the smartPartInfo
            to the smartPart that lives in the workspace.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.OnShow(`0,`1)">
            <summary>
            When overridden in a derived class, shows the smartPart
            on the workspace.
            </summary>
            <param name="smartPart">The smart part to show.</param>
            <param name="smartPartInfo">The information to apply to the smart part.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.OnHide(`0)">
            <summary>
            When overridden in a derived class, hides the smartPart
            on the workspace.
            </summary>
            <param name="smartPart">The smart part to hide.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.OnClose(`0)">
            <summary>
            When overridden in a derived class, closes and removes the smartPart
            from the workspace.
            </summary>
            <param name="smartPart">The smart part to close.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.ConvertFrom(Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo)">
            <summary>
            By default uses the conversion implemented in <see cref="M:Microsoft.Practices.CompositeUI.SmartParts.SmartPartInfo.ConvertTo``1(Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo)"/>. 
            A derived class can implement a different conversion scheme.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.CreateDefaultSmartPartInfo(`0)">
            <summary>
            Creates an instance of the TSmartPartInfo to use to show 
            the SmartPart when no information has been 
            provided. By default creates a new instance of the TSmartPartInfo.
            </summary>
            <param name="forSmartPart">The smart part to create the default information for.</param>
            <returns>A new instance of the information to use to show the smart part.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.CloseInternal(`0)">
            <summary>
            Closes the smart part without raising the <see cref="E:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.SmartPartClosing"/> event.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.WorkItem">
            <summary>
            Dependency injection setter property to get the <see cref="P:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.WorkItem"/> where the 
            object is contained.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.SmartPartClosing">
            <summary>
            See <see cref="E:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.SmartPartClosing"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.SmartPartActivating">
            <summary>
            See <see cref="E:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.SmartPartActivating"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.SmartPartActivated">
            <summary>
            See <see cref="E:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.SmartPartActivated"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.ActiveSmartPart">
            <summary>
            The active smart part in the Workspace, or <c>null</c> (<c>Nothing</c> in VB.NET).
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.SmartParts">
            <summary>
            The collection of smart parts contained in the workspace.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2.InnerSmartParts">
            <summary>
            The list of smart parts shown in the workspace.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.WorkItem">
            <summary>
            Defines the work item into which smart parts run.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.Dispose">
            <summary>
            Disposes the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.Run">
            <summary>
            Runs the work item by calling the <see cref="M:Microsoft.Practices.CompositeUI.WorkItem.OnRunStarted"/> method, 
            which will raise the <see cref="E:Microsoft.Practices.CompositeUI.WorkItem.RunStarted"/> event and eventually 
            the custom starting business logic a derived class placed on it.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.InitializeRootWorkItem(Microsoft.Practices.ObjectBuilder.Builder)">
            <summary>
            Initializes a root <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>. Intended to be called by the user who creates the
            first WorkItem using new. Subsequent child WorkItem classes are automatically initialized
            through dependency injection from their parent.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Practices.ObjectBuilder.Builder"/> used to build objects.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.InitializeWorkItem">
            <summary>
            Initializes the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> after construction.
            This method is typically called by the parent <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> 
            during the process of building a new child <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.CreateCommand(System.Type,System.String)">
            <summary>
            Called to create a new <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> instance to add to the <see cref="P:Microsoft.Practices.CompositeUI.WorkItem.Commands"/> collection.
            </summary>
            <param name="t">The type of command to create.</param>
            <param name="name">The name of the command.</param>
            <returns>A new <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> instance.</returns>
            <remarks>Override this method to create another type of command.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.CreateEventTopic(System.Type,System.String)">
            <summary>
            Called to create a new <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> instance to add to the <see cref="P:Microsoft.Practices.CompositeUI.WorkItem.EventTopics"/> collection.
            </summary>
            <param name="t">The type of event topic to create.</param>
            <param name="topicName">The name of the event topic.</param>
            <returns>A new <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> instance.</returns>
            <remarks>Override this method to create another type of event topic.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.InitializeServices">
            <summary>
            Initializes the built-in services exposed by the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.Activate">
            <summary>
            Activates the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.Deactivate">
            <summary>
            Deactivates the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.DeleteState">
            <summary>
            Deletes the saved state of the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>. The local copy of the state is not changed.
            </summary>
            <exception cref="T:Microsoft.Practices.CompositeUI.Services.ServiceMissingException">Thrown if the IStatePersistenceService is not
            registered in the WorkItem.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.Load">
            <summary>
            Loads the work item.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.GetSmartPartInfo``1(System.Object)">
            <summary>
            Returns smart part information for a control.
            </summary>
            <typeparam name="TSmartPartInfo">The type of the <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo"/> instance to retrieve.</typeparam>
            <param name="smartPart">The smartPart which to retreive the smart part info for.</param>
            <returns>The <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo"/> for the control and type requested, or null if no one is registered.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.OnBuiltUp(System.String)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilderAware.OnBuiltUp(System.String)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.FinishInitialization">
            <summary>
            Finishes the initialization of <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> classes by calling the
            <see cref="T:Microsoft.Practices.CompositeUI.Services.IWorkItemExtensionService"/> and <see cref="M:Microsoft.Practices.CompositeUI.WorkItem.OnInitialized"/>. For
            root WorkItems, this will be called by the <see cref="T:Microsoft.Practices.CompositeUI.CabApplication`1"/> after
            the modules are loaded (so root WorkItem extensions work). For child WorkItems,
            this will be called during <see cref="M:Microsoft.Practices.CompositeUI.WorkItem.OnBuiltUp(System.String)"/> automatically.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.OnTearingDown">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilderAware.OnTearingDown"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.RegisterSmartPartInfo(System.Object,Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo)">
            <summary>
            Registers a <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo"/> view data for a given control.
            </summary>
            <param name="smartPart">The smartPart to which provide additional presentation information.</param>
            <param name="info">The additional presentation information for the control.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.Save">
            <summary>
            Saves the state of this work item.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.Terminate">
            <summary>
            Terminates the work item.
            </summary>
            <remarks>
            Terminating the work item renders the work item invalid. Any calls to a work item
            after it has been terminated will result in undefined behavior.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.BuildUp">
            <summary>
            Used when the creator of a root <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> needs to ensure that the WorkItem
            has properly built itself (so its dependencies get injected properly).
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.Dispose(System.Boolean)">
            <summary>
            Internal dispose method.
            </summary>
            <param name="disposing">Set to true if called from Dispose;
            set to false if called from the finalizer.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.OnActivated">
            <summary>
            Fires the <see cref="E:Microsoft.Practices.CompositeUI.WorkItem.Activated"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.OnActivating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Fires the <see cref="E:Microsoft.Practices.CompositeUI.WorkItem.Activating"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.OnDeactivated">
            <summary>
            Fires the <see cref="E:Microsoft.Practices.CompositeUI.WorkItem.Deactivated"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.OnDeactivating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Fires the <see cref="E:Microsoft.Practices.CompositeUI.WorkItem.Deactivating"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.OnDisposed">
            <summary>
            Fires the <see cref="E:Microsoft.Practices.CompositeUI.WorkItem.Disposed"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.OnIdChanged">
            <summary>
            Fires the <see cref="E:Microsoft.Practices.CompositeUI.WorkItem.IdChanged"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.OnInitialized">
            <summary>
            Fires the <see cref="E:Microsoft.Practices.CompositeUI.WorkItem.Initialized"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.OnObjectAdded(System.Object)">
            <summary>
            Fires the <see cref="E:Microsoft.Practices.CompositeUI.WorkItem.ObjectRemoved"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.OnObjectRemoved(System.Object)">
            <summary>
            Fires the <see cref="E:Microsoft.Practices.CompositeUI.WorkItem.ObjectRemoved"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.OnRunStarted">
            <summary>
            Fires the <see cref="E:Microsoft.Practices.CompositeUI.WorkItem.RunStarted"/> event. Derived classes can override this 
            method to place custom business logic to execute when the <see cref="M:Microsoft.Practices.CompositeUI.WorkItem.Run"/> 
            method is called on the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.OnTerminated">
            <summary>
            Fires the <see cref="E:Microsoft.Practices.CompositeUI.WorkItem.Terminated"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItem.OnTerminating">
            <summary>
            Fires the <see cref="E:Microsoft.Practices.CompositeUI.WorkItem.Terminating"/> event.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.WorkItem.Activated">
            <summary>
            Occurs when the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> is activated.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.WorkItem.Activating">
            <summary>
            Occurs when the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> is activating.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.WorkItem.Deactivated">
            <summary>
            Occurs when the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> is deactivated.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.WorkItem.Deactivating">
            <summary>
            Occurs when the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> is deactivated.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.WorkItem.Disposed">
            <summary>
            Occurs when the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> is disposed.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.WorkItem.IdChanged">
            <summary>
            Occurs when the <see cref="P:Microsoft.Practices.CompositeUI.WorkItem.ID"/> is changed.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.WorkItem.Initialized">
            <summary>
            Occurs when the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> is initialized.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.WorkItem.RunStarted">
            <summary>
            Occurs when the <see cref="M:Microsoft.Practices.CompositeUI.WorkItem.Run"/> method is executed.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.WorkItem.Terminated">
            <summary>
            Occurs when the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> is terminated.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.WorkItem.Terminating">
            <summary>
            Occurs before a <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> is terminated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItem.Commands">
            <summary>
            List of commands registered with the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItem.ID">
            <summary>
            Gets/sets the ID of this <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>. The ID is used for persistence of the
            WorkItem. By default, the ID will be a GUID. If you set a new ID, the old state data
            will be lost and replaced with new, empty state.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItem.Items">
            <summary>
            Gets a list of all the objects and services contained in this <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItem.Parent">
            <summary>
            Gets the parent <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItem.RootWorkItem">
            <summary>
            Gets the root <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> (the one at the top of the hierarchy).
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItem.Services">
            <summary>
            Returns the collection of services associated with this WorkItem.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItem.SmartParts">
            <summary>
            Returns a collection describing the child smart parts (objects
            with the <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.SmartPartAttribute"/> applied to them) in this WorkItem.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItem.State">
            <summary>
            Gets the <see cref="P:Microsoft.Practices.CompositeUI.WorkItem.State"/> associated with this <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItem.Status">
            <summary>
            Gets the current <see cref="T:Microsoft.Practices.CompositeUI.WorkItemStatus"/> of the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItem.TraceSource">
            <summary>
            Sets the <see cref="T:System.Diagnostics.TraceSource"/> used by the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> to log messages. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItem.UIExtensionSites">
            <summary>
            Returns a collection of <see cref="T:Microsoft.Practices.CompositeUI.UIExtensionSite"/>s in the WorkItem.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItem.WorkItems">
            <summary>
            Returns a collection describing the child <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> objects in this WorkItem.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItem.Workspaces">
            <summary>
            Returns a collection describing the <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace"/> objects in this WorkItem.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItem.EventTopics">
            <summary>
            Returns a collection describing the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> objects in this WorkItem.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItem.InnerBuilder">
            <summary>
            Provides protected access to the builder contained within the workitem.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItem.InnerLocator">
            <summary>
            Provides protected access to the locator contained within the workitem.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.StateException">
            <summary>
            An <see cref="T:System.Exception"/> thrown by <see cref="T:Microsoft.Practices.CompositeUI.StateElement"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.StateException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.StateException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.StateException"/> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.StateException"/> class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.ModuleEnumeratorException">
            <summary>
            An exception thrown by the <see cref="T:Microsoft.Practices.CompositeUI.Services.IModuleEnumerator"/> implementations.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleEnumeratorException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleEnumeratorException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleEnumeratorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleEnumeratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Configuration.Xsd.SolutionProfileElement">
            <remarks/>
            <summary>
            Partial class to initialize solution profile.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.Xsd.SolutionProfileElement.#ctor">
            <summary>
            Constructor used to initialize empty moduleinfo.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.Xsd.SolutionProfileElement.Modules">
            <remarks/>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Configuration.Xsd.ModuleInfoElement">
            <remarks/>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.Xsd.ModuleInfoElement.Roles">
            <remarks/>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.Xsd.ModuleInfoElement.AssemblyFile">
            <remarks/>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.Xsd.ModuleInfoElement.UpdateLocation">
            <remarks/>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Configuration.Xsd.RoleElement">
            <remarks/>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.Xsd.RoleElement.Allow">
            <remarks/>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.EventBroker.Publication">
            <summary>
            Represents a publication for a topic and handles the publication event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.Publication.#ctor(Microsoft.Practices.CompositeUI.EventBroker.EventTopic,System.Object,System.String,Microsoft.Practices.CompositeUI.WorkItem,Microsoft.Practices.CompositeUI.EventBroker.PublicationScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.Publication"/> class
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.Publication.PublicationHandler(System.Object,System.EventArgs)">
            <summary>
            Fires the event publication.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.Publication.Dispose">
            <summary>
            See <see cref="M:System.IDisposable.Dispose"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.Publication.Dispose(System.Boolean)">
            <summary>
            Implementation of the disposable pattern.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.Publication.Publisher">
            <summary>
            The publisher of the event.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.Publication.WorkItem">
            <summary>
            The <see cref="P:Microsoft.Practices.CompositeUI.EventBroker.Publication.WorkItem"/> this Publication lives in.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.Publication.EventName">
            <summary>
            The name of the event on the <see cref="P:Microsoft.Practices.CompositeUI.EventBroker.Publication.Publisher"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.Publication.Scope">
            <summary>
            The <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.PublicationScope"/> of the event.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Configuration.VisualizationElement">
            <summary>
            Contains the definition of a visualization.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.VisualizationElement.Type">
            <summary>
            The type of the visualization to use.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Commands.CommandHandlerAttribute">
            <summary>
            Declares a method as a <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> handler.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.CommandHandlerAttribute.#ctor(System.String)">
            <summary>
            Declares a method as a handler for a <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> with specified name.
            </summary>
            <param name="commandName">The name of the <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> the method handles.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Commands.CommandHandlerAttribute.CommandName">
            <summary>
            Gets the name of the <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> that the decorated method handles.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter">
            <summary>
            Defines a command adapter class, which provides the logic needed for an object to be able 
            to invoke a <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.CommandAdapter.BindCommand(Microsoft.Practices.CompositeUI.Commands.Command)">
            <summary>
            Called when the <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> is registered with a <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/>.
            </summary>
            <param name="command">The <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> the adapter is being added to.</param>
            <remarks>The default implementation of this method adds the CommandChangedHandler method
            handler to the <see cref="E:Microsoft.Practices.CompositeUI.Commands.Command.Changed"/> event.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.CommandAdapter.UnbindCommand(Microsoft.Practices.CompositeUI.Commands.Command)">
            <summary>
            Called when <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> is removed from a <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/>.
            </summary>
            <param name="command">The <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> the adapter is being removed from.</param>
            <remarks>The default implementation of this method removes the CommandChangedHandler method handler 
            from the <see cref="E:Microsoft.Practices.CompositeUI.Commands.Command.Changed"/> event.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.CommandAdapter.AddInvoker(System.Object,System.String)">
            <summary>
            Adds an invoker to the <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.CommandAdapter.RemoveInvoker(System.Object,System.String)">
            <summary>
            Removes the invoker from the <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.CommandAdapter.Dispose">
            <summary>
            Used to unhook and dispose all the invokers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.CommandAdapter.Dispose(System.Boolean)">
            <summary>
            Called to free resources.
            </summary>
            <param name="disposing">Should be true when calling from Dispose().</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.CommandAdapter.ContainsInvoker(System.Object)">
            <summary>
            Checks if the <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> contains the invoker.
            </summary>
            <param name="invoker">The invoker to check for.</param>
            <returns>true if the invoker is in the adapter; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.CommandAdapter.OnCommandChanged(Microsoft.Practices.CompositeUI.Commands.Command)">
            <summary>
            Handles the <see cref="E:Microsoft.Practices.CompositeUI.Commands.Command.Changed"/> event.
            </summary>
            <param name="command">The <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> that fired the Changed event.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.CommandAdapter.FireCommand">
            <summary>
            Causes the execution of the <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.Commands.CommandAdapter.ExecuteCommand">
            <summary>
            Event to be fired by the <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> implementations
            to signal that the <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> should execute.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Commands.CommandAdapter.InvokerCount">
            <summary>
            Gets the count of invokers in the <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.SmartParts.SmartPartInfoProvider">
            <summary>
            Default implementation of a <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfoProvider"/> that 
            can be used to aggregate the behavior on smart parts that use 
            a designer to drag and drop the <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo"/> components.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.SmartPartInfoProvider.GetSmartPartInfo(System.Type)">
            <summary>
            Retrieves a smart part information object of the given type from the 
            registered <see cref="P:Microsoft.Practices.CompositeUI.SmartParts.SmartPartInfoProvider.Items"/>.
            </summary>
            <seealso cref="M:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfoProvider.GetSmartPartInfo(System.Type)"/>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.SmartParts.SmartPartInfoProvider.Items">
            <summary>
            The list of <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo"/> items the provider exposes.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.WorkItemExtensionAttribute">
            <summary>
            Indicates that a class extends <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> classes. The class
            must implement <see cref="T:Microsoft.Practices.CompositeUI.IWorkItemExtension"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.WorkItemExtensionAttribute.#ctor(System.Type)">
            <summary>
            Initializes the attribute with the type of the work item to extend.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.WorkItemExtensionAttribute.WorkItemType">
            <summary>
            The type of the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> to extend.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.StatePersistenceException">
            <summary>
            Exception thrown by <see cref="T:Microsoft.Practices.CompositeUI.Services.IStatePersistenceService"/> implementations 
            whenever a module fails to load.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.StatePersistenceException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.StatePersistenceException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.StatePersistenceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.StatePersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.AdapterAlreadyBoundToACommand">
            <summary>
              Looks up a localized string similar to Command adapter has already been bound to a command..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.AdapterNotBoundToGivenCommand">
            <summary>
              Looks up a localized string similar to The adapter has not been previously bound to the command..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.AddServicesCalled">
            <summary>
              Looks up a localized string similar to AddServices() method called for Module {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.AutogeneratedCodeWarning">
            <summary>
              Looks up a localized string similar to This code is required by the smart part informations..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.BackgroundSubscriberException">
            <summary>
              Looks up a localized string similar to An exception thrown in a background subscriber was not handled. The exception was {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.CannotAddWorkItemToItself">
            <summary>
              Looks up a localized string similar to A WorkItem cannot be added to itself..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.CannotFindPublishedEvent">
            <summary>
              Looks up a localized string similar to The specified event {0} was not found in the publisher..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.CannotGetCommandAdapter">
            <summary>
              Looks up a localized string similar to The Command {0} cannot get an adapter for the type &quot;{1}&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.CannotGetMapService">
            <summary>
              Looks up a localized string similar to The Command &quot;{0}&quot; does not have access to the IAdapterMapService to perform the AddInvoker operation..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.CannotLoadState">
            <summary>
              Looks up a localized string similar to An error occurred while loading the state with id {0} from the storage..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.CannotRegisterStaticSubscriptionMethods">
            <summary>
              Looks up a localized string similar to Subscription {0}.{1} is static and is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.CannotSaveState">
            <summary>
              Looks up a localized string similar to An error occurred while saving the state with id {0} to the storage..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.CannotUnregisterSiteRegisteredWithParent">
            <summary>
              Looks up a localized string similar to Cannot unregister site that was registered in parent: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.CommandInjectionBuildUp">
            <summary>
              Looks up a localized string similar to Adding command handler on {0} for command &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.CommandInjectionTearDown">
            <summary>
              Looks up a localized string similar to Removing command handler from {0} for command &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ConfigurationAttributeOnValueWithIncompatibleType">
            <summary>
              Looks up a localized string similar to Property marked as configuration property is not valid as its type {0} does not inherit from ApplicationSettingsBase..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ConfigurationProviderMustBeUserScoped">
            <summary>
              Looks up a localized string similar to Settings must be user-scoped in order to use the selected provider. .
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ConfigurationProviderNotSupportLocation">
            <summary>
              Looks up a localized string similar to This provider only supports settings classes defined in assemblies deployed locally..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.DefaultProfileNotSpecified">
            <summary>
              Looks up a localized string similar to No default profile has been specified..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.DependencyForUnknownModule">
            <summary>
              Looks up a localized string similar to Cannot add dependency for unknown module &apos;{0}&apos;; call AddModule() before AddDependency().
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.DependencyOnMissingModule">
            <summary>
              Looks up a localized string similar to A module declared a dependency on another module which is not declared to be loaded. Missing module(s): {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.DictionaryIsReadOnly">
            <summary>
              Looks up a localized string similar to The dictionary is readonly and can not be modified..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.DuplicatedModule">
            <summary>
              Looks up a localized string similar to A duplicated module with name {0} has been found by the loader..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.DuplicateID">
            <summary>
              Looks up a localized string similar to An object with this ID already exists: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.DuplicateService">
            <summary>
              Looks up a localized string similar to A service of this type already exists: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.DuplicateUIExtensionSite">
            <summary>
              Looks up a localized string similar to A UI extension site with this name already exists: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ErrorEnumeratingModules">
            <summary>
              Looks up a localized string similar to An exception occurred while enumerating the modules using the {0} enumerator..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ErrorReadingProfile">
            <summary>
              Looks up a localized string similar to An error occurred while reading the solution profile {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.EventCommandAdapterInvokerNotType">
            <summary>
              Looks up a localized string similar to Invoker is not of type {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.EventNotPresentOnInvoker">
            <summary>
              Looks up a localized string similar to The event {0} on the invoker {1} is not present..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.EventTopicFireException">
            <summary>
              Looks up a localized string similar to One or more exceptions occurred while firing the topic &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.EventTopicTraceFireCompleted">
            <summary>
              Looks up a localized string similar to EventTopic {0} fire completed..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.EventTopicTraceFireExceptions">
            <summary>
              Looks up a localized string similar to Exceptions occurred while firing the EventTopic {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.EventTopicTraceFireStarted">
            <summary>
              Looks up a localized string similar to Firing EventTopic {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.EventTopicTracePublicationAdded">
            <summary>
              Looks up a localized string similar to Publication for the EventTopic {0} was added for the event {1} on the type {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.EventTopicTracePublicationRemoved">
            <summary>
              Looks up a localized string similar to Publication removed from EventTopic {0} for the event {1} on the type {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.EventTopicTraceSubscriptionAdded">
            <summary>
              Looks up a localized string similar to Subscription for EventTopic {0} added for the method {1} on the type {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.EventTopicTraceSubscriptionRemoved">
            <summary>
              Looks up a localized string similar to Subscription on EventTopic {0} removed for the method {1} on the type {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ExtensionSiteDoesNotExist">
            <summary>
              Looks up a localized string similar to Extension site does not exist: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.FailedToLoadModule">
             <summary>
               Looks up a localized string similar to Failed to load module from assembly {0}. Error was:
            {1}.
             </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.InvalidAdapter">
            <summary>
              Looks up a localized string similar to The adapter type is not a ICommandAdapter..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.InvalidCatalogXml">
            <summary>
              Looks up a localized string similar to There is an error in the XML document. &lt;{0} xmlns=&apos;{1}&apos;&gt; was not expected..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.InvalidConfigurationSectionType">
            <summary>
              Looks up a localized string similar to Configuration section {0} must be of type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.InvalidCryptographyValue">
            <summary>
              Looks up a localized string similar to The UseCryptography setting must be set to a valid boolean value..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.InvalidEnumValue">
            <summary>
              Looks up a localized string similar to The value of the argument {0} provided for the enumeration {1} is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.InvalidFileCatalogFilePath">
            <summary>
              Looks up a localized string similar to Catalog file path cannot be empty or null, and must be a local file under the application folder..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.InvalidIsolatedStorageStatePersistanceParsedScope">
            <summary>
              Looks up a localized string similar to Cannot open an isolated store with scope {0}. Check the IsolatedStorageFile documentation for the valid combination of values..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.InvalidIsolatedStorageStatePersistanceScope">
            <summary>
              Looks up a localized string similar to Scope value {0} is invalid. {1} does not exist in the IsolatedStorageScope enumeration..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.InvalidPublicationScope">
            <summary>
              Looks up a localized string similar to The value for the PublicationScope is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.InvalidPublicationSignature">
            <summary>
              Looks up a localized string similar to Publication event {0}.{1} must have a delegate type compatible with EventHandler or EventHandler&lt;T&gt;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.InvalidSolutionProfilePath">
            <summary>
              Looks up a localized string similar to Catalog file path {0} is not a local file under the application folder {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.InvalidSolutionProfileXml">
            <summary>
              Looks up a localized string similar to There is an error in the XML document. &lt;{0} xmlns=&apos;{1}&apos;&gt; was not expected..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.InvalidStateStream">
            <summary>
              Looks up a localized string similar to State stream from storage is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.InvalidSubscriptionSignature">
            <summary>
              Looks up a localized string similar to Subscription method {0}.{1} must have a signature receiving an object and an EventArgs parameter (EventHandler or EventHandler&lt;T&gt; delegates signature)..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.LogModuleAdded">
            <summary>
              Looks up a localized string similar to Module {0} added to the container..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.LogModuleAssemblyLoaded">
            <summary>
              Looks up a localized string similar to Loaded assembly file {0} for Module..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ModuleNotFound">
            <summary>
              Looks up a localized string similar to Assembly file {0} was not found..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ModulePathNotUnderRoot">
            <summary>
              Looks up a localized string similar to Assembly path {0} does not fall under the current application root..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ModuleStartCalled">
            <summary>
              Looks up a localized string similar to Load() method called for Module {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.NoRegisteredUIElementFactory">
            <summary>
              Looks up a localized string similar to No UIElementAdapterFactory register for type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.NoRemoveWorkItemFromManagedObjectCollection">
            <summary>
              Looks up a localized string similar to Removing WorkItems is not permitted. Use WorkItem.Terminate or WorkItem.Dispose to clean up a WorkItem..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.NullReaderReturned">
            <summary>
              Looks up a localized string similar to Service implementation {0} returned a null reader for the catalog..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.NullSolutionProfileReaderReturned">
            <summary>
              Looks up a localized string similar to The ModuleEnumerator implementation {0} returned a null reader for the catalog..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.OnlyOnePublicationIsAllowed">
            <summary>
              Looks up a localized string similar to Cannot add more than one instance of the same publisher to one topic..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ProfileNotFound">
            <summary>
              Looks up a localized string similar to Profile {0} was not found in the catalog..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ProfileNotFoundInCatalog">
            <summary>
              Looks up a localized string similar to Profile {0} was not found in the catalog..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ReadProfileException">
            <summary>
              Looks up a localized string similar to An exception occurred while reading the profile..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ReferencedAssemblyNotFound">
            <summary>
              Looks up a localized string similar to The ModuleLoaderService cannot initialize the module because some of their dependencies are not present. Make sure to deploy all the assemblies needed to execute the module..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.RemoveCommandFromWorkItemIsNotPermitted">
            <summary>
              Looks up a localized string similar to Removing Commands from WorkItem is not permitted. An attempt was made to remove the command {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.RemoveEventTopicFromWorkItemIsNotPermitted">
            <summary>
              Looks up a localized string similar to Removing EventTopic from WorkItem is not permitted. An attempt was made to remove the EventTopic {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ServiceAdded">
            <summary>
              Looks up a localized string similar to Service {1} added for Module {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ServiceAddedOnDemand">
            <summary>
              Looks up a localized string similar to Service {1} will be added on demand for Module {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ServiceMissingExceptionMessage">
            <summary>
              Looks up a localized string similar to Service {0}, required for component {1} is not available in the current context..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.ServiceMissingExceptionSimpleMessage">
            <summary>
              Looks up a localized string similar to Service {0} is not available in the current context..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.SmartPartMustImplementISmartPartInfoProvider">
            <summary>
              Looks up a localized string similar to Implement ISmartPartInfoProvider in the containing smart part. Required in order for contained smart part infos to work..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.SmartPartNotInWorkspace">
            <summary>
              Looks up a localized string similar to The smartpart is not present in the workspace..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.SolutionProfileNotFound">
            <summary>
              Looks up a localized string similar to Catalog file at location {0} could not be found..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.StateDoesNotExist">
            <summary>
              Looks up a localized string similar to There is no state persisted with the given id {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.StaticCommandHandlerNotSupported">
            <summary>
              Looks up a localized string similar to Static command handler &quot;{0}&quot; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.StaticCommandPublisherNotSupported">
            <summary>
              Looks up a localized string similar to Static command publisher &quot;{0}&quot; is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.StaticPublisherNotAllowed">
            <summary>
              Looks up a localized string similar to Registering static event {0} as topic publication is not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.StringCannotBeEmpty">
            <summary>
              Looks up a localized string similar to The provided String argument {0} must not be empty..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.SubscriberHandlerNotFound">
            <summary>
              Looks up a localized string similar to The specified method handler {0} is not present or accessible on the subscriber type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.TraceCommandExecuted">
            <summary>
              Looks up a localized string similar to The Command {0} has been executed..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.TraceCommandStatusChanged">
            <summary>
              Looks up a localized string similar to Command status for command {0} has changed to {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.TraceStateChangedMessage">
            <summary>
              Looks up a localized string similar to The state with ID {0} has changed. The changed value was {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.TraceWorkItemRun">
            <summary>
              Looks up a localized string similar to The work item {0} has been run..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.TraceWorkItemRunStarted">
            <summary>
              Looks up a localized string similar to WorkItem {0} Run method has started..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.TraceWorkItemStatusActivating">
            <summary>
              Looks up a localized string similar to The work item {0} is Activating..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.TraceWorkItemStatusChangedToActivated">
            <summary>
              Looks up a localized string similar to The work item {0} is Activated..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.TraceWorkItemStatusChangedToDeactivated">
            <summary>
              Looks up a localized string similar to The work item {0} is Deactivated..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.TraceWorkItemStatusChangedToDisposed">
            <summary>
              Looks up a localized string similar to The work item {0} is Disposed..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.TraceWorkItemStatusChangedToInitialized">
            <summary>
              Looks up a localized string similar to The work item {0} is Initialized..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.TraceWorkItemStatusChangedToTerminated">
            <summary>
              Looks up a localized string similar to The work item {0} is Terminated..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.TraceWorkItemStatusDeactivating">
            <summary>
              Looks up a localized string similar to The work item {0} is Deactivating..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.TraceWorkItemStatusTerminating">
            <summary>
              Looks up a localized string similar to The work item {0} is Terminating..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.TypeNotCompatible">
            <summary>
              Looks up a localized string similar to The provided type {0} is not compatible with {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.UIElementNotCorrectType">
            <summary>
              Looks up a localized string similar to UI element must be a {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.UnsupportedSmartPartType">
            <summary>
              Looks up a localized string similar to Smart part type {0} is not supported. Expected {1} or a compatible type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.VisualizerAlreadyInitialized">
            <summary>
              Looks up a localized string similar to The visualizer has already been initialized..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.VisualizerMustImplementIVisualizer">
            <summary>
              Looks up a localized string similar to Visualizer type must implement IVisualizer..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.WorkItemDesignerCodeWarning">
            <summary>
              Looks up a localized string similar to Do not modify this method, changes will be lost upon regeneration by the designer..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.WorkItemExtensionInitialized">
            <summary>
              Looks up a localized string similar to Initialized WorkItem extension {0} with WorkItem {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.WorkItemExtensionRegistered">
            <summary>
              Looks up a localized string similar to Registered WorkItem extension type {0} for WorkItem type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.WorkItemExtensionRootRegistered">
            <summary>
              Looks up a localized string similar to Registered WorkItem extension type {0} for root WorkItem..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.WorkItemExtensionTypeAlreadyRegistered">
            <summary>
              Looks up a localized string similar to The WorkItem Extension type {0} is already registered for WorkItem type {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Properties.Resources.WorkItemTerminated">
            <summary>
              Looks up a localized string similar to WorkItem has already been disposed or terminated..
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Configuration.ServiceElement">
            <summary>
            Contains the definition of a service.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.ServiceElement.ServiceType">
            <summary>
            Optional type used to expose the service. If not provided, the 
            <see cref="P:Microsoft.Practices.CompositeUI.Configuration.ServiceElement.InstanceType"/> will be used to publish the service.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.ServiceElement.InstanceType">
            <summary>
            The type of the service implementation to instantiate.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.EventBroker.EventSubscriptionAttribute">
            <summary>
            Declares a method as an <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> subscription.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventSubscriptionAttribute.#ctor(System.String)">
            <summary>
            Declares a method as an <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> subscription.
            </summary>
            <param name="topic">The name of the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> to subscribe to.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventSubscriptionAttribute.#ctor(System.String,Microsoft.Practices.CompositeUI.EventBroker.ThreadOption)">
            <summary>
            Delcares a method as an <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> subscription using the specified <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.ThreadOption"/>.
            </summary>
            <param name="topic">The name of the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> to subscribe to.</param>
            <param name="threadOption">The <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.ThreadOption"/> indicating how the method should be called.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.EventSubscriptionAttribute.Topic">
            <summary>
            The name of the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> the decorated method is subscribed to.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.EventSubscriptionAttribute.Thread">
            <summary>
            Indicates the way the subscription method should be called, see
            <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.ThreadOption"/> enumeration for the supported modes.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Collections.ServiceCollection">
            <summary>
            Collection of services that are contained in a <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.#ctor(Microsoft.Practices.ObjectBuilder.ILifetimeContainer,Microsoft.Practices.ObjectBuilder.IReadWriteLocator,Microsoft.Practices.ObjectBuilder.IBuilder{Microsoft.Practices.ObjectBuilder.BuilderStage},Microsoft.Practices.CompositeUI.Collections.ServiceCollection)">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.Practices.CompositeUI.Collections.ServiceCollection"/> class.
            </summary>
            <param name="container">The lifetime container the collection will use</param>
            <param name="locator">The locator the collection will use</param>
            <param name="builder">The builder the collection will use</param>
            <param name="parent">The parent collection</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.Add``1(``0)">
            <summary>
            Adds a service.
            </summary>
            <typeparam name="TService">The type under which to register the service.</typeparam>
            <param name="serviceInstance">The service to register.</param>
            <exception cref="T:System.ArgumentNullException">serviceInstance is null.</exception>
            <exception cref="T:System.ArgumentException">A service of the given type is already registered.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.Add(System.Type,System.Object)">
            <summary>
            Adds a service.
            </summary>
            <param name="serviceType">The type under which to register the service.</param>
            <param name="serviceInstance">The service to register.</param>
            <exception cref="T:System.ArgumentNullException">serviceInstance is null.</exception>
            <exception cref="T:System.ArgumentException">A service of the given type is already registered.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.AddOnDemand``1">
            <summary>
            Adds a service that will not be created until the first time it is requested.
            </summary>
            <typeparam name="TService">The type of service</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.AddOnDemand``2">
            <summary>
            Adds a service that will not be created until the first time it is requested.
            </summary>
            <typeparam name="TService">The type of service</typeparam>
            <typeparam name="TRegisterAs">The type to register the service as</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.AddOnDemand(System.Type)">
            <summary>
            Adds a service that will not be created until the first time it is requested.
            </summary>
            <param name="serviceType">The type of service</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.AddOnDemand(System.Type,System.Type)">
            <summary>
            Adds a service that will not be created until the first time it is requested.
            </summary>
            <param name="serviceType">The type of service</param>
            <param name="registerAs">The type to register the service as</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.AddNew``1">
            <summary>
            Creates and adds a service.
            </summary>
            <typeparam name="TService">The type of the service to create. This type is also
            the type the service is registered under.</typeparam>
            <returns>The new service instance.</returns>
            <exception cref="T:System.ArgumentException">Object builder cannot find an appropriate
            constructor on the object.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.AddNew``2">
            <summary>
            Creates a service.
            </summary>
            <typeparam name="TService">The type of the service to create.</typeparam>
            <typeparam name="TRegisterAs">The type the service is registered under.</typeparam>
            <returns>The new service instance.</returns>
            <exception cref="T:System.ArgumentException">Object builder cannot find an appropriate
            constructor on the object.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.AddNew(System.Type)">
            <summary>
            Creates a service.
            </summary>
            <param name="serviceType">The type of the service to create. This type is also
            the type the service is registered under.</param>
            <returns>The new service instance.</returns>
            <exception cref="T:System.ArgumentException">Object builder cannot find an appropriate
            constructor on the object.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.AddNew(System.Type,System.Type)">
            <summary>
            Creates a service.
            </summary>
            <param name="serviceType">The type of the service to create.</param>
            <param name="registerAs">The type the service is registered under.</param>
            <returns>The new service instance.</returns>
            <exception cref="T:System.ArgumentException">Object builder cannot find an appropriate
            constructor on the object.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.Contains``1">
            <summary>
            Determines whether the given service type exists in the collection.
            </summary>
            <typeparam name="TService">Type of service to search for.</typeparam>
            <returns>
            true if the TService exists; 
            false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.Contains(System.Type)">
            <summary>
            Determines whether the given service type exists in the collection.
            </summary>
            <param name="serviceType">Type of service to search for.</param>
            <returns>
            true if the serviceType exists; 
            false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.ContainsLocal(System.Type)">
            <summary>
            Determines whether the given service type exists directly in the local collection. The parent
            collections are not consulted.
            </summary>
            <param name="serviceType">Type of service to search for.</param>
            <returns>
            true if the serviceType exists; 
            false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.Get``1">
            <summary>
            Gets a service.
            </summary>
            <typeparam name="TService">The type of the service to be found.</typeparam>
            <returns>The service instance, if present; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.Get``1(System.Boolean)">
            <summary>
            Gets a service.
            </summary>
            <typeparam name="TService">The type of the service to be found.</typeparam>
            <param name="ensureExists">If true, will throw an exception if the service is not found.</param>
            <returns>The service instance, if present; null if not (and ensureExists is false).</returns>
            <exception cref="T:Microsoft.Practices.CompositeUI.Services.ServiceMissingException">Thrown if ensureExists is true and the service is not found.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.Get(System.Type)">
            <summary>
            Gets a service.
            </summary>
            <param name="serviceType">The type of the service to be found.</param>
            <returns>The service instance, if present; null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.Get(System.Type,System.Boolean)">
            <summary>
            Gets a service.
            </summary>
            <param name="serviceType">The type of the service to be found.</param>
            <param name="ensureExists">If true, will throw an exception if the service is not found.</param>
            <returns>The service instance, if present; null if not (and ensureExists is false).</returns>
            <exception cref="T:Microsoft.Practices.CompositeUI.Services.ServiceMissingException">Thrown if ensureExists is true and the service is not found.</exception>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.Remove``1">
            <summary>
            Removes a service registration from the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
            <typeparam name="TService">The service type to remove.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.Remove(System.Type)">
            <summary>
            Removes a service registration from the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
            <param name="serviceType">The service type to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.OnAdded(System.Object)">
            <summary>
            Called when a new service is added to the collection.
            </summary>
            <param name="service">The service that was added.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.OnRemoved(System.Object)">
            <summary>
            Called when a service is removed from the collection.
            </summary>
            <param name="service">The service that was removed.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.BuildFirstTimeItem(System.Type,System.Type,System.Object)">
            <summary>
            Used to build a first time item (either an existing one or a new one). The Builder will
            end up locating it, and we add it to the container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.BuildRepeatedItem(System.Type,System.Object)">
            <summary>
            Used to "build" an item we've already seen once. We don't use the builder, because that
            would do double-injection. Since it's already in the lifetime container, all we need to
            do is add a second locator registration for it for the right name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.GetEnumerator">
            <summary>
            Enumerates through all seen types and retrieves a KeyValuePair for each. 
            </summary>
            <returns></returns>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.Added">
            <summary>
            Fired whenever a new service is added to the container. For demand-add services, the event is
            fired when the service is eventually created.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.Collections.ServiceCollection.Removed">
            <summary>
            Fired whenever a service is removed from the container. When the services collection is disposed,
            the Removed event is not fired for the services in the container.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.RootWorkItemExtensionAttribute">
            <summary>
            Indicates that a class extends root <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> classes. The class
            must implement <see cref="T:Microsoft.Practices.CompositeUI.IWorkItemExtension"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.UIElements.UIElementAdapter`1">
            <summary>
            Support class to simplify creation of <see cref="T:Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapter"/>-derived classes.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapter">
            <summary>
            Interface implemented by objects that provide UIElement support for named locations in a shell.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapter.Add(System.Object)">
            <summary>
            Adds a UI Element.
            </summary>
            <param name="uiElement">The UI element to add.</param>
            <returns>The added UI element.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapter.Remove(System.Object)">
            <summary>
            Removes a UI Element.
            </summary>
            <param name="uiElement">The UI element to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIElements.UIElementAdapter`1.Add(`0)">
            <summary>
            Adds a UI Element.
            </summary>
            <param name="uiElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIElements.UIElementAdapter`1.Remove(`0)">
            <summary>
            Removes a UI Element.
            </summary>
            <param name="uiElement">The UI Element to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIElements.UIElementAdapter`1.Add(System.Object)">
            <summary>
            Adds a UI Element.
            </summary>
            <param name="uiElement">The UI Element to add.</param>
            <returns>The UI Element that was actually added.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIElements.UIElementAdapter`1.Remove(System.Object)">
            <summary>
            Removes a UI Element.
            </summary>
            <param name="uiElement">The UI Element to remove.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.DataProtectionCryptographyService">
            <summary>
            Provides Cryptography services using the Data Protection API.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.ICryptographyService">
            <summary>
            Service that exposes cryptography methods to encrypt and decrypt data.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ICryptographyService.EncryptSymmetric(System.Byte[])">
            <summary>
            Encrypts data using a specified symmetric cryptography provider.
            </summary>
            <param name="plainText">The input data to encrypt.</param>
            <returns>The resulting cipher text.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ICryptographyService.DecryptSymmetric(System.Byte[])">
            <summary>
            Decrypts a cipher text using a specified symmetric cryptography provider.
            </summary>
            <param name="cipherText">The cipher text for which you want to decrypt.</param>
            <returns>The resulting plain text.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.DataProtectionCryptographyService.EncryptSymmetric(System.Byte[])">
            <summary>
            Encrypts data using the Data Protection API.
            </summary>
            <param name="plainText">The input data to be protected by using encryption.</param>
            <returns>The resulting cipher text.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.DataProtectionCryptographyService.DecryptSymmetric(System.Byte[])">
            <summary>
            Decrypts a cipher text using the Data Protection API.
            </summary>
            <param name="cipherText">The cipher text for which you want to decrypt.</param>
            <returns>The resulting plain text.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.DataProtectionCryptographyService.Configure(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Configures the <see cref="T:Microsoft.Practices.CompositeUI.Services.DataProtectionCryptographyService"/> using the
            specified settings collection.
            </summary>
            <param name="settings">A <see cref="T:System.Collections.Specialized.NameValueCollection"/> with the setting to use to configure the service.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.ServiceMissingException">
            <summary>
            Exception thrown when a required service doesn't exist in 
            the component container.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ServiceMissingException.#ctor">
            <summary>
            Initializes the exception.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ServiceMissingException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ServiceMissingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception, 
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ServiceMissingException.#ctor(System.Type)">
            <summary>
            Initializes the exception for the given service type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ServiceMissingException.#ctor(System.Type,System.Object)">
            <summary>
            Initializes the exception for the given service type and component.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ServiceMissingException.#ctor(System.Type,System.Object,System.Exception)">
            <summary>
            Initializes the exception.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ServiceMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.IWorkItemTypeCatalogService">
            <summary>
            The implemented service should register <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> types
            and create <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IWorkItemTypeCatalogService.CreateEachWorkItem``1(Microsoft.Practices.CompositeUI.WorkItem,System.Action{``0})">
            <summary>
            Creates <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>s for the registered types that match the provided type.
            </summary>
            <typeparam name="TWorkItem">The type of <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>s to create.</typeparam>
            <param name="parentWorkItem">The parent <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> to create them in.</param>
            <param name="action">A callback for each created <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IWorkItemTypeCatalogService.CreateEachWorkItem(System.Type,Microsoft.Practices.CompositeUI.WorkItem,System.Action{Microsoft.Practices.CompositeUI.WorkItem})">
            <summary>
            Creates <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>s for the registered types that match the provided type.
            </summary>
            <param name="workItemType">The type of <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>s to create.</param>
            <param name="parentWorkItem">The parent <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> to create them in.</param>
            <param name="action">A callback for each created <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IWorkItemTypeCatalogService.RegisterWorkItem``1">
            <summary>
            Registers a <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> type with the catalog.
            </summary>
            <typeparam name="TWorkItem">The type of WorkItem to be registered.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IWorkItemTypeCatalogService.RegisterWorkItem(System.Type)">
            <summary>
            Registers a <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> type with the catalog.
            </summary>
            <param name="workItemType">The type of WorkItem to be registered.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.IWorkItemTypeCatalogService.RegisteredWorkItemTypes">
            <summary>
            Returns the list of registered <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> types.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Configuration.ServiceElementCollection">
            <summary>
            List of services configured for the <see cref="T:Microsoft.Practices.CompositeUI.CabApplication`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ServiceElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.CompositeUI.Configuration.ServiceElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ServiceElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Retrieves the key for the configuration element.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ServiceElementCollection.Add(Microsoft.Practices.CompositeUI.Configuration.ServiceElement)">
            <summary>
            Adds a new service to the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ServiceElementCollection.Remove(System.Type)">
            <summary>
            Removes a service from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ServiceElementCollection.GetEnumerator">
            <summary>
            Enumerates the services in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.ServiceElementCollection.Item(System.Type)">
            <summary>
            Provides access to the service elements by the type of service registered.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.BuilderStrategies.ObjectBuiltNotificationPolicy">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.BuilderStrategies.ObjectBuiltNotificationPolicy.AddedDelegates">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.BuilderStrategies.ObjectBuiltNotificationPolicy.RemovedDelegates">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.BuilderStrategies.ObjectBuiltNotificationPolicy.ItemNotification">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.BuilderStrategies.BuilderStrategyException">
            <summary>
            An <see cref="T:System.Exception"/> thrown by the different builder strategies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.BuilderStrategies.BuilderStrategyException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.BuilderStrategies.BuilderStrategyException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.BuilderStrategies.BuilderStrategyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.BuilderStrategies.BuilderStrategyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.WorkItemTypeCatalogService">
            <summary>
            Keeps a catlog of <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>s that are registered at module initialization time.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.WorkItemTypeCatalogService.CreateEachWorkItem``1(Microsoft.Practices.CompositeUI.WorkItem,System.Action{``0})">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeUI.Services.IWorkItemTypeCatalogService.CreateEachWorkItem``1(Microsoft.Practices.CompositeUI.WorkItem,System.Action{``0})"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.WorkItemTypeCatalogService.CreateEachWorkItem(System.Type,Microsoft.Practices.CompositeUI.WorkItem,System.Action{Microsoft.Practices.CompositeUI.WorkItem})">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeUI.Services.IWorkItemTypeCatalogService.CreateEachWorkItem(System.Type,Microsoft.Practices.CompositeUI.WorkItem,System.Action{Microsoft.Practices.CompositeUI.WorkItem})"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.WorkItemTypeCatalogService.RegisterWorkItem``1">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeUI.Services.IWorkItemTypeCatalogService.RegisterWorkItem``1"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.WorkItemTypeCatalogService.RegisterWorkItem(System.Type)">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeUI.Services.IWorkItemTypeCatalogService.RegisterWorkItem(System.Type)"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.WorkItemTypeCatalogService.RegisteredWorkItemTypes">
            <summary>
            See <see cref="P:Microsoft.Practices.CompositeUI.Services.IWorkItemTypeCatalogService.RegisteredWorkItemTypes"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.FileCatalogModuleEnumerator">
            <summary>
            This implementation of IModuleEnumerator processes the assemblies specified
            in a solution profile.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.FileCatalogModuleEnumerator.#ctor">
            <summary>
            Initializes a new instance which will use the <see cref="F:Microsoft.Practices.CompositeUI.Configuration.SolutionProfileReader.DefaultCatalogFile"/> as
            the solution profile
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.FileCatalogModuleEnumerator.#ctor(System.String)">
            <summary>
            Initializes a new instance that will use the specified file as the solution profile.
            </summary>
            <param name="catalogFilePath">The path to the solution profile. This file must be
            located under the application folder.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.FileCatalogModuleEnumerator.EnumerateModules">
            <summary>
            Processes the solution profile and returns the list of modules specified in it.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Practices.CompositeUI.Configuration.ModuleInfo"/> instances.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.FileCatalogModuleEnumerator.Configure(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Configures the enumerator by passing the path to the solution profile file.
            </summary>
            <param name="settings">Provide a value with the key 
            "filePath" that points to a file that is valid according to the schema defined by SolutionProfile.xsd</param>
            <remarks>
            If the file path is absent the catalog will be read from 
            the <see cref="F:Microsoft.Practices.CompositeUI.Configuration.SolutionProfileReader.DefaultCatalogFile"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.FileCatalogModuleEnumerator.CatalogFilePath">
            <summary>
            Gets or sets the file path to the solution profile file.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.TraceSourceCatalogService">
            <summary>
            Service that manages the <see cref="T:System.Diagnostics.TraceSource"/> objects used in the application.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.ITraceSourceCatalogService">
            <summary>
            Defines a set of methods and an event which represent a trace source catalog
            service. The purpose of the service is to manage <see cref="T:System.Diagnostics.TraceSource"/> instances
            that are used in the application.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.ITraceSourceCatalogService.GetTraceSource(System.String)">
            <summary>
            Retrieves a <see cref="T:System.Diagnostics.TraceSource"/> by name.
            </summary>
            <param name="sourceName">Name of the source to retrieve.</param>
            <returns>Always retrieves a valid source. If one 
            was not previously created, it will be initialized upon retrieval.</returns>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.ITraceSourceCatalogService.TraceSourceAdded">
            <summary>
            Raised when a trace source is added to the collection
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.ITraceSourceCatalogService.TraceSources">
            <summary>
            Returns a <see cref="T:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2"/> for all the known trace sources.
            </summary>
            <returns>The dictionary of trace sources</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.TraceSourceCatalogService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.TraceSourceCatalogService"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.TraceSourceCatalogService.GetTraceSource(System.String)">
            <summary>
            Gets a <see cref="T:System.Diagnostics.TraceSource"/> with the given source name.
            </summary>
            <param name="sourceName">The name of the <see cref="T:System.Diagnostics.TraceSource"/> to retrieve.</param>
            <returns>Either an existing <see cref="T:System.Diagnostics.TraceSource"/> or a new one if 
            it does not exist already.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.TraceSourceCatalogService.AddSharedListener(System.Diagnostics.TraceListener)">
            <summary>
            Adds the listener to all the trace sources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.TraceSourceCatalogService.AddSharedListener(System.Diagnostics.TraceListener,System.String)">
            <summary>
            Adds the listener to all the trace sources with a specific name.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.CompositeUI.TraceSourceCatalogService.TraceSourceAdded">
            <summary>
            Raised when a trace source is added.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.TraceSourceCatalogService.TraceSources">
            <summary>
            Returns a <see cref="T:Microsoft.Practices.CompositeUI.Utility.ReadOnlyDictionary`2"/> for all the known trace sources.
            </summary>
            <returns>The dictionary of trace sources</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.ComponentDependencyAttribute">
            <summary>
            Indicates that the property or constructor/method parameter is a reference
            to a component that lives in the parent <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>s
            <see cref="P:Microsoft.Practices.CompositeUI.WorkItem.Items"/> collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.ComponentDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.CompositeUI.ComponentDependencyAttribute"/> using the
            given component ID.
            </summary>
            <param name="id">The ID of the component. May not be null.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.ComponentDependencyAttribute.CreateParameter(System.Type)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.ParameterAttribute.CreateParameter(System.Type)"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.ComponentDependencyAttribute.ID">
            <summary>
            The ID of the component to inject.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.ComponentDependencyAttribute.Type">
            <summary>
            Optional type of the component to create if not <see cref="P:Microsoft.Practices.CompositeUI.ComponentDependencyAttribute.CreateIfNotFound"/> is 
            true and the component cannot be located in the current container.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.ComponentDependencyAttribute.CreateIfNotFound">
            <summary>
            Whether the component should be created automatically if it is not found in the
            <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>. Defaults to false.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Utility.Set`1">
            <summary>
            Represents a set of items. Adding an item to a set twice will only yield one instance
            in the collection.
            </summary>
            <typeparam name="TItem">The type of items to be stored in the <see cref="T:Microsoft.Practices.CompositeUI.Utility.Set`1"/>.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.Set`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.Set`1.Add(`0)">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.Set`1.AsReadOnly">
            <summary>
            Returns a read-only wrapper around the <see cref="T:Microsoft.Practices.CompositeUI.Utility.Set`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.Set`1.Clear">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Clear"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.Set`1.Contains(`0)">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.Set`1.CopyTo(`0[],System.Int32)">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.Set`1.Remove(`0)">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.Set`1.GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.Set`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Utility.Set`1.Count">
            <summary>
            See <see cref="P:System.Collections.Generic.ICollection`1.Count"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Utility.Set`1.IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.BuilderStrategies.ObjectBuiltNotificationStrategy">
            <summary>
            An ObjectBuilder strategy which notifies CAB when an object is fully built so that the
            <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> can be notified.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.BuilderStrategies.ObjectBuiltNotificationStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilderStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.BuilderStrategies.ObjectBuiltNotificationStrategy.TearDown(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Object)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.IBuilderStrategy.TearDown(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Object)"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.WindowsPrincipalAuthenticationService">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.CompositeUI.Services.IAuthenticationService"/> that 
            sets the current WindowsPrincipal as the principal policy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.WindowsPrincipalAuthenticationService.Authenticate">
            <summary>
            Authenticates the user.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.IWorkItemActivationService">
            <summary>
            Provides functionality for monitoring <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> activation.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.IWorkItemActivationService.ChangeStatus(Microsoft.Practices.CompositeUI.WorkItem)">
            <summary>
            Called by the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> when its status has changed.
            </summary>
            <param name="item">The <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> that has changed.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.ReflectionModuleEnumerator">
            <summary>
            This implementation of <see cref="T:Microsoft.Practices.CompositeUI.Services.IModuleEnumerator"/> processes the assemblies located in a specified
            folder and enumerates the modules locating them using reflection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ReflectionModuleEnumerator.#ctor">
            <summary>
            Initializes a new <see cref="T:Microsoft.Practices.CompositeUI.Services.ReflectionModuleEnumerator"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ReflectionModuleEnumerator.EnumerateModules">
            <summary>
            Returns an array with the modules found by using reflection.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Practices.CompositeUI.Configuration.IModuleInfo"/>. An empty array is returned if no module is located.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.ReflectionModuleEnumerator.BasePath">
            <summary>
            Gets or sets the path where the assemblies to be reflected are located.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Configuration.SolutionProfileReader">
            <summary>
            Reads the <see cref="T:Microsoft.Practices.CompositeUI.Configuration.Xsd.SolutionProfileElement"/> from a file.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.Configuration.SolutionProfileReader.DefaultCatalogFile">
            <summary>
            The default profile to use if no profile is specified.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.SolutionProfileReader.#ctor">
            <summary>
            Initializes a new instance which will use the <see cref="F:Microsoft.Practices.CompositeUI.Configuration.SolutionProfileReader.DefaultCatalogFile"/> as
            the solution profile.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.SolutionProfileReader.#ctor(System.String)">
            <summary>
            Initializes a new instance that will use the specified file as the solution profile.
            </summary>
            <param name="catalogFilePath">The path to the solution profile. This file must be
            located under the application folder.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.SolutionProfileReader.ReadProfile">
            <summary>
            Reads the solution profile form the specified file.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.Practices.CompositeUI.Configuration.Xsd.SolutionProfileElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.SolutionProfileReader.ProcessProfileRoles(Microsoft.Practices.CompositeUI.Configuration.Xsd.SolutionProfileElement)">
            <summary>
            Processes the solution profile comparing the roles the user has against
            the roles specified on the solution profile. The list of modules in the 
            solution profile is modified eliminating the modules the user has not
            access to according his/her roles.
            </summary>
            <param name="profile">The solution profile specifying the modules and
            the roles needed to use that modules.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.SolutionProfileReader.CatalogFilePath">
            <summary>
            Gets the solution profile file path.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.ReaderLock">
            <summary>
            Helper class that makes it easier to ensure proper usage of a <see cref="T:System.Threading.ReaderWriterLock"/> 
            for readers by providing support for <see cref="T:System.IDisposable"/> and the using keyword.
            </summary>
            <example>
            Common usage is as follows:
            <code>
            ReaderWriterLock mylock = new ReaderWriterLock();
            
            // Inside some method
            using (new ReaderLock(rwLock))
            {
            	// Do your safe resource read accesses here.
            }
            </code>
            If a timeout is specified, the <see cref="P:Microsoft.Practices.CompositeUI.LockBase.TimedOut"/> property should be checked inside the 
            using statement:
            <code>
            ReaderWriterLock mylock = new ReaderWriterLock();
            
            // Inside some method
            using (ReaderLock l = new ReaderLock(rwLock, 100))
            {
            	if (l.TimedOut == false)
            	{
            		// Do your safe resource read accesses here.
            	}
            	else
            	{
            		throw new InvalidOperationException("Could not lock the resource.");
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.ReaderLock.#ctor(System.Threading.ReaderWriterLock)">
            <summary>
            Acquires a reader lock on the rwLock received 
            with no timeout specified.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.ReaderLock.#ctor(System.Threading.ReaderWriterLock,System.Int32)">
            <summary>
            Tries to acquire a reader lock on the  rwLock received 
            with the timeout specified. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.ReaderLock.#ctor(System.Threading.ReaderWriterLock,System.TimeSpan)">
            <summary>
            Tries to acquire a reader lock on the rwLock received 
            with the timeout specified. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Commands.CommandStatus">
            <summary>
            Status of a <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> at any given time.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.Commands.CommandStatus.Enabled">
            <summary>
            <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> will fire the <see cref="E:Microsoft.Practices.CompositeUI.Commands.Command.ExecuteAction"/> event
            when it is executed (either directly through <see cref="M:Microsoft.Practices.CompositeUI.Commands.Command.Execute"/> or 
            through an <see cref="E:Microsoft.Practices.CompositeUI.Commands.CommandAdapter.ExecuteCommand"/> event in a registered 
            adapter. Adapters should show the appropriate UI elements.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.Commands.CommandStatus.Disabled">
            <summary>
            <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> will not fire the <see cref="E:Microsoft.Practices.CompositeUI.Commands.Command.ExecuteAction"/> event
            even if it is executed (either directly through <see cref="M:Microsoft.Practices.CompositeUI.Commands.Command.Execute"/> or 
            through an <see cref="E:Microsoft.Practices.CompositeUI.Commands.CommandAdapter.ExecuteCommand"/> event in a registered 
            adapter. Adapters should disable UI elements (or equivalent 
            operation available for it), meaning that it will be 
            visible but not enabled, in the general case.
            </summary>
            <remarks>
            Trying to execute a disabled command does not perform any action and does 
            not raise any exceptions.
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.Commands.CommandStatus.Unavailable">
            <summary>
            <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/> will not fire the <see cref="E:Microsoft.Practices.CompositeUI.Commands.Command.ExecuteAction"/> event
            even if it is executed (either directly through <see cref="M:Microsoft.Practices.CompositeUI.Commands.Command.Execute"/> or 
            through an <see cref="E:Microsoft.Practices.CompositeUI.Commands.CommandAdapter.ExecuteCommand"/> event in a registered 
            adapter. Adapters should hide UI elements (or equivalent 
            operation available for it), meaning that it will be 
            visible but not enabled, in the general case.
            </summary>
            <remarks>
            Trying to execute an unavailable command does not perform any action and does 
            not raise any exceptions.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.ModuleDependencySolver">
            <summary>
            Used by the <see cref="T:Microsoft.Practices.CompositeUI.Services.ModuleLoaderService"/> to get the load sequence
            for the modules to load according to their dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleDependencySolver.AddModule(System.String)">
            <summary>
            Adds a module to the solver.
            </summary>
            <param name="name">The name that uniquely identifies the module.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleDependencySolver.AddDependency(System.String,System.String)">
            <summary>
            Adds a module dependency between the modules specified by dependingModule and
            dependentModule.
            </summary>
            <param name="dependingModule">The name of the module with the dependency.</param>
            <param name="dependentModule">The name of the module dependingModule
            depends on.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleDependencySolver.Solve">
            <summary>
            Calculates an ordered vector according to the defined dependencies.
            Non-dependant modules appears at the beginning of the resulting array.
            </summary>
            <returns>The resulting ordered list of modules.</returns>
            <exception cref="T:Microsoft.Practices.CompositeUI.CyclicDependencyFoundException">This exception is thrown
            when a cycle is found in the defined depedency graph.</exception>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.ModuleDependencySolver.ModuleCount">
            <summary>
            Gets the number of modules added to the solver.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Configuration.ConfigurationAttribute">
            <summary>
            Attribute for Dependency Injection of a reference to an <see cref="T:System.Configuration.ApplicationSettingsBase"/>-derived
            class that provides the configuration for the component.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ConfigurationAttribute.#ctor">
            <summary>
            Initializes the attribute with no special key for the configuration settings class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ConfigurationAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a key to use to specialize the configuration settings class.
            </summary>
            <param name="settingsKey">The key used to specialize the configuration settings class.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ConfigurationAttribute.CreateParameter(System.Type)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.ParameterAttribute.CreateParameter(System.Type)"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.EventBroker.WorkItemSubscriptions">
            <summary>
            Maintains the subscriptions registered from a <see cref="P:Microsoft.Practices.CompositeUI.EventBroker.WorkItemSubscriptions.WorkItem"/>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.EventBroker.EventPublicationAttribute">
            <summary>
            Declares an event as an <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> publication.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventPublicationAttribute.#ctor(System.String)">
            <summary>
            Declares an event publication for an <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> with the specified topic and 
            a <c>Global</c> <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.PublicationScope"/>.
            </summary>
            <param name="topic">The name of the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> the decorated event will publish.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventPublicationAttribute.#ctor(System.String,Microsoft.Practices.CompositeUI.EventBroker.PublicationScope)">
            <summary>
            Declares an event publication for an <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> with the specified topic and
            <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.PublicationScope"/>.
            </summary>
            <param name="topic">The name of the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> the event will publish.</param>
            <param name="scope">The scope for the publication.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.EventPublicationAttribute.Topic">
            <summary>
            The name of the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> the decorated event will publish.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.EventPublicationAttribute.Scope">
            <summary>
            The <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.PublicationScope"/> for the publication.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.BuilderStrategies.EventBrokerStrategy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder.BuilderStrategy"/>processes <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> publications and subscriptions
            declared in a component inspecting the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventPublicationAttribute"/> and 
            <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventSubscriptionAttribute"/> attributes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.BuilderStrategies.EventBrokerStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            Forwards the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> related attributes processing to the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventInspector"/>
            for registering publishers and/or subscribers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.BuilderStrategies.EventBrokerStrategy.TearDown(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Object)">
            <summary>
            Forwards the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventTopic"/> related attributes processing to the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventInspector"/>
            for unregistering publishers and/or subscribers.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.WorkItemStatus">
            <summary>
            The status of the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.WorkItemStatus.Inactive">
            <summary>
            The <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> is inactive.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.WorkItemStatus.Active">
            <summary>
            The <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> is active.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.WorkItemStatus.Terminated">
            <summary>
            The <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> is terminated.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.ServiceAttribute">
            <summary>
            Indicates that a class should be automatically registered as a service into the
            application's root <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.ServiceAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.ServiceAttribute"/> class. The
            registered type will the concrete type of the service.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.ServiceAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.ServiceAttribute"/> class using
            the provided type as the registration type for the service.
            </summary>
            <param name="registerAs">The registration type for the service.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.ServiceAttribute.RegisterAs">
            <summary>
            The service type implemented by the attributed class. This is the type 
            that will be used to register the service with the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.ServiceAttribute.AddOnDemand">
            <summary>
            Specifies that the service instance will be created and added to the container
            upon request of that service (delayed creation).
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.IsolatedStorageStatePersistenceService">
            <summary>
            Service that uses isolated storage for state persistence.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.Services.IsolatedStorageStatePersistenceService.ScopeAttribute">
            <summary>
            Configuration attribute that can be passed to the <see cref="M:Microsoft.Practices.CompositeUI.IConfigurable.Configure(System.Collections.Specialized.NameValueCollection)"/> implementation 
            on the service, to determine the scope of the isolated storage to use for persistence. It must be a 
            key in the dictionary with the name <c>Scope</c>.
            </summary>
            <example>
            Supported syntax is the same one as C#, except that the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope"/> enum type 
            must be omited:
            <code>Assembly | User</code>
            or:
            <code>Roaming | User | Assembly | Domain</code>
            </example>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IsolatedStorageStatePersistenceService.#ctor">
            <summary>
            Initializes the service with the default isolated store, which is the combination 
            of the flags <see cref="F:System.IO.IsolatedStorage.IsolatedStorageScope.Roaming"/>, <see cref="F:System.IO.IsolatedStorage.IsolatedStorageScope.User"/>,
            <see cref="F:System.IO.IsolatedStorage.IsolatedStorageScope.Assembly"/> and <see cref="F:System.IO.IsolatedStorage.IsolatedStorageScope.Domain"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IsolatedStorageStatePersistenceService.#ctor(System.IO.IsolatedStorage.IsolatedStorageScope)">
            <summary>
            Initializes the service with a specific isolated storage scope.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IsolatedStorageStatePersistenceService.Contains(System.String)">
            <summary>
            Checks if the persistence service has the state with the specified
            id in its storage.
            </summary>
            <param name="id">The id of the state to look for.</param>
            <returns>true if the state is persisted in the storage; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IsolatedStorageStatePersistenceService.RemoveStream(System.String)">
            <summary>
            Removes the state from the persistence storage.
            </summary>
            <param name="id">The id of the state to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IsolatedStorageStatePersistenceService.GetStream(System.String)">
            <summary>
            Retrieves the <see cref="T:System.IO.Stream"/> to use as the storage for the state.
            </summary>
            <param name="id">The identifier of the state.</param>
            <returns>The storage stream.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IsolatedStorageStatePersistenceService.Configure(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Configures the service with the <see cref="F:Microsoft.Practices.CompositeUI.Services.IsolatedStorageStatePersistenceService.ScopeAttribute"/> value, to customize the 
            store location.
            </summary>
            <param name="settings">Values to configure the service with.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.IsolatedStorageStatePersistenceService.Clear">
            <summary>
            Removes all state from the store.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Services.IsolatedStorageStatePersistenceService.Scope">
            <summary>
            Specifies the scope for the storage.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.CyclicDependencyFoundException">
            <summary>
            Represents the exception that is thrown when there is a circular dependency
            between modules during the module loading process.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CyclicDependencyFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.CyclicDependencyFoundException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CyclicDependencyFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.CyclicDependencyFoundException"/> class
            with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CyclicDependencyFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.CyclicDependencyFoundException"/> class
            with the specified error message and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.CyclicDependencyFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.CyclicDependencyFoundException"/> class
            with the serialization data.
            </summary>
            <param name="info">Holds the serialized object data about the exception being thrown.</param>
            <param name="context">Contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Controller">
            <summary>
            A base class for controllers and presenters that provides access to the <see cref="P:Microsoft.Practices.CompositeUI.Controller.WorkItem"/>
            and <see cref="P:Microsoft.Practices.CompositeUI.Controller.State"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Controller.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.Controller"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Controller.WorkItem">
            <summary>
            Gets the current work item where the controller lives.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Controller.State">
            <summary>
            Gets the state associated with the current <see cref="P:Microsoft.Practices.CompositeUI.Controller.WorkItem"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.EventBroker.Subscription">
            <summary>
            Represents a topic subscription.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.Subscription.#ctor(Microsoft.Practices.CompositeUI.EventBroker.WorkItemSubscriptions,System.Object,System.String,Microsoft.Practices.CompositeUI.EventBroker.ThreadOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.Subscription"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.Subscription.#ctor(Microsoft.Practices.CompositeUI.EventBroker.WorkItemSubscriptions,System.Object,System.String,System.Type[],Microsoft.Practices.CompositeUI.EventBroker.ThreadOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.Subscription"/> class
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.Subscription.Subscriber">
            <summary>
            The subscriber of the event.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.Subscription.HandlerMethodName">
            <summary>
            The handler method name that's subscribed to the event.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.EventBroker.Subscription.ThreadOption">
            <summary>
            The callback thread option for the event.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Configuration.ModuleInfo">
            <summary>
            This is the default implementation of <see cref="T:Microsoft.Practices.CompositeUI.Configuration.IModuleInfo"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Configuration.IModuleInfo">
            <summary>
            Exposes metadata describing a module.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.IModuleInfo.AssemblyFile">
            <summary>
            Gets the assembly file path to the module.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.IModuleInfo.UpdateLocation">
            <summary>
            Gets the update location string for the module.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.IModuleInfo.AllowedRoles">
            <summary>
            Gets a list of required roles to use the module.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ModuleInfo.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.Practices.CompositeUI.Configuration.ModuleInfo"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ModuleInfo.#ctor(System.String)">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.Practices.CompositeUI.Configuration.ModuleInfo"/> class.
            </summary>
            <param name="assemblyFile">The filename of an assembly.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ModuleInfo.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.Practices.CompositeUI.Configuration.ModuleInfo"/> class.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ModuleInfo.SetAssemblyFile(System.String)">
            <summary>
            Sets the assembly file path to the module.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ModuleInfo.SetUpdateLocation(System.String)">
            <summary>
            Sets the update location for the module.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ModuleInfo.AddRoles(System.String[])">
            <summary>
            Adds roles to the allowed roles for the module.
            </summary>
            <param name="roles">A string list of roles to be added.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Configuration.ModuleInfo.ClearRoles">
            <summary>
            Clears the list of allowed roles.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.ModuleInfo.AssemblyFile">
            <summary>
            Gets the assembly file path to the module.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.ModuleInfo.UpdateLocation">
            <summary>
            Gets the update location for the module.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.ModuleInfo.AllowedRoles">
            <summary>
            Gets the list of required roles to use the module.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace`2">
            <summary>
            Interface implemented by workspaces that cannot inherit from 
            <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2"/> and want to aggregate the functionality from 
            a <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceComposer`2"/>
            </summary>
            <typeparam name="TSmartPart">Type of smart parts supported by the workspace implementing this interface.</typeparam>
            <typeparam name="TSmartPartInfo">Type of the smart part information received by the workspace implementing this interface.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace`2.OnActivate(`0)">
            <summary>
            When overridden in a derived class, activates the smartPart
            in the workspace.
            </summary>
            <param name="smartPart">The smart part to activate.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace`2.OnApplySmartPartInfo(`0,`1)">
            <summary>
            When overridden in a derived class, applies the smartPartInfo
            to the smartPart that lives in the workspace.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace`2.OnShow(`0,`1)">
            <summary>
            When overridden in a derived class, shows the smartPart
            on the workspace.
            </summary>
            <param name="smartPart">The smart part to show.</param>
            <param name="smartPartInfo">The information to apply to the smart part.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace`2.OnHide(`0)">
            <summary>
            When overridden in a derived class, hides the smartPart
            on the workspace.
            </summary>
            <param name="smartPart">The smart part to hide.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace`2.OnClose(`0)">
            <summary>
            When overridden in a derived class, closes and removes the smartPart
            from the workspace.
            </summary>
            <param name="smartPart">The smart part to close.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace`2.RaiseSmartPartActivated(Microsoft.Practices.CompositeUI.SmartParts.WorkspaceEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.SmartPartActivated"/> event on the composed workspace.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> to use for the event.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace`2.RaiseSmartPartActivating(Microsoft.Practices.CompositeUI.SmartParts.WorkspaceCancelEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.SmartPartActivating"/> event on the composed workspace.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> to use for the event.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace`2.RaiseSmartPartClosing(Microsoft.Practices.CompositeUI.SmartParts.WorkspaceCancelEventArgs)">
            <summary>
            Raises the <see cref="E:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.SmartPartClosing"/> event on the composed workspace.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> to use for the event.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace`2.ConvertFrom(Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo)">
            <summary>
            Converts from the given source into a new instance of the TSmartPartInfo information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.StateChangedAttribute">
            <summary>
            Indicates a method that will handle state changed events.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateChangedAttribute.#ctor(System.String,Microsoft.Practices.CompositeUI.EventBroker.ThreadOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.StateChangedAttribute"/> using the provided
            topic and thread options.
            </summary>
            <param name="topic">The state topic.</param>
            <param name="option">The threading option.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.StateAttribute">
            <summary>
            Indicates that a property or parameter should be injected with a value from
            the <see cref="T:Microsoft.Practices.CompositeUI.State"/> of the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.StateAttribute"/> class. Will
            cause dependency injection to select the first item in the <see cref="T:Microsoft.Practices.CompositeUI.State"/>
            container with a compatible type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.StateAttribute"/> class using the
            provided state ID. This causes the dependency injection to select the item
            in the <see cref="T:Microsoft.Practices.CompositeUI.State"/> container with the given ID.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.StateAttribute.CreateParameter(System.Type)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.ParameterAttribute.CreateParameter(System.Type)"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.SimpleWorkItemActivationService">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.CompositeUI.IWorkItemActivationService"/> that ensures that only
            one <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> is active at one time.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SimpleWorkItemActivationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.SimpleWorkItemActivationService"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SimpleWorkItemActivationService.ChangeStatus(Microsoft.Practices.CompositeUI.WorkItem)">
            <summary>
            See <see cref="M:Microsoft.Practices.CompositeUI.IWorkItemActivationService.ChangeStatus(Microsoft.Practices.CompositeUI.WorkItem)"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2">
            <summary>
            A dictionary of lists.
            </summary>
            <typeparam name="TKey">The key to use for lists.</typeparam>
            <typeparam name="TValue">The type of the value held by lists.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.Add(`0)">
            <summary>
            If a list does not already exist, it will be created automatically.
            </summary>
            <param name="key">The key of the list that will hold the value.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.Add(`0,`1)">
            <summary>
            Adds a value to a list with the given key. If a list does not already exist, 
            it will be created automatically.
            </summary>
            <param name="key">The key of the list that will hold the value.</param>
            <param name="value">The value to add to the list under the given key.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.Clear">
            <summary>
            Removes all entries in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the dictionary contains the specified value.
            </summary>
            <param name="value">The value to locate.</param>
            <returns>true if the dictionary contains the value in any list; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains the given key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>true if the dictionary contains the given key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.FindAllValuesByKey(System.Predicate{`0})">
            <summary>
            Retrieves the all the elements from the list which have a key that matches the condition 
            defined by the specified predicate.
            </summary>
            <param name="keyFilter">The filter with the condition to use to filter lists by their key.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.FindAllValues(System.Predicate{`1})">
            <summary>
            Retrieves all the elements that match the condition defined by the specified predicate.
            </summary>
            <param name="valueFilter">The filter with the condition to use to filter values.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.Remove(`0)">
            <summary>
            Removes a list by key.
            </summary>
            <param name="key">The key of the list to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.Remove(`0,`1)">
            <summary>
            Removes a value from the list with the given key.
            </summary>
            <param name="key">The key of the list where the value exists.</param>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.Remove(`1)">
            <summary>
            Removes a value from all lists where it may be found.
            </summary>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#List{TValue}}#Add(`0,System.Collections.Generic.List{`1})">
            <summary>
            See <see cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#List{TValue}}#TryGetValue(`0,System.Collections.Generic.List{`1}@)">
            <summary>
            See <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#List{TValue}}}#Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.List{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#List{TValue}}}#Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.List{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#List{TValue}}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.List{`1}}[],System.Int32)">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#List{TValue}}}#Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.List{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#List{TValue}}}#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.Values">
            <summary>
            Gets a shallow copy of all values in all lists.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.Keys">
            <summary>
            Gets the list of keys in the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.Item(`0)">
            <summary>
            Gets or sets the list associated with the given key. The 
            access always succeeds, eventually returning an empty list.
            </summary>
            <param name="key">The key of the list to access.</param>
            <returns>The list associated with the key.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.Count">
            <summary>
            Gets the number of lists in the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#List{TValue}}#Values">
            <summary>
            See <see cref="P:System.Collections.Generic.IDictionary`2.Values"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Utility.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#List{TValue}}}#IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapterFactory">
            <summary>
            Describes a factory for creating UI Element adapters
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapterFactory.GetAdapter(System.Object)">
            <summary>
            Gets an adapter for the given UI Element.
            </summary>
            <param name="uiElement">The UI Element to get the adapter for.</param>
            <returns>An <see cref="T:Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapter"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapterFactory.Supports(System.Object)">
            <summary>
            Inidicates whether the factory supports the given UI Element type.
            </summary>
            <param name="uiElement">The UI Element to check for support.</param>
            <returns>true if the UI Element is supported by the factory; 
            otherwise false.</returns>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Services.ModuleLoadException">
            <summary>
            Exception thrown by <see cref="T:Microsoft.Practices.CompositeUI.Services.IModuleLoaderService"/> implementations whenever 
            a module fails to load.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleLoadException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleLoadException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleLoadException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception, 
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleLoadException.#ctor(System.String,System.String)">
            <summary>
            Initializes the exception with a particular module and error message.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleLoadException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception 
            that happened.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Services.ModuleLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartPlaceholder">
            <summary>
            When implemented by a control, provides a simple placeholder to be filled with a SmartPart at runtime.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartPlaceholder.SmartPartName">
            <summary>
            Gets or sets the default name for the SmartPart contained in the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.SmartParts.ISmartPartPlaceholder.SmartPart">
            <summary>
            Gets or sets the SmartPart contained by this placeholder.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.EventBroker.EventBrokerException">
            <summary>
            An exception thrown by the Event Broker components.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventBrokerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.EventBroker.EventBrokerException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventBrokerException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventBrokerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.EventBroker.EventBrokerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Configuration.SettingsSection">
            <summary>
            Definition of the configuration section for the block.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.CompositeUI.Configuration.SettingsSection.SectionName">
            <summary>
            The configuration section name for this section.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.SettingsSection.Services">
            <summary>
            List of startup services that will be initialized on the host.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Configuration.SettingsSection.Visualizer">
            <summary>
            Optional visualizer.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.Commands.EventCommandAdapter`1">
            <summary>
            A <see cref="T:Microsoft.Practices.CompositeUI.Commands.CommandAdapter"/> that fires a .NET event when the command is fired.
            </summary>
            <typeparam name="TInvoker">Type of the invoker(s)</typeparam>
            <remarks>This adapter allows a set of invokers of a given type TIvoker
            to fire a single <see cref="T:Microsoft.Practices.CompositeUI.Commands.Command"/>.</remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.EventCommandAdapter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.Commands.EventCommandAdapter`1"/> class
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.EventCommandAdapter`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance and wires the specified invoker event to this adapter.
            </summary>
            <param name="invoker">The invoker that is to be adapted.</param>
            <param name="eventName">The event the adapter will listen on the invoker.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.EventCommandAdapter`1.InvokerEventHandler(System.Object,System.EventArgs)">
            <summary>
            The handler for the invokers events.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.EventCommandAdapter`1.AddInvoker(System.Object,System.String)">
            <summary>
            Adds an invoker with the specified eventName.
            </summary>
            <param name="invoker">The invoker object to add.</param>
            <param name="eventName">The event on the invoker the adapter will listen to.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.EventCommandAdapter`1.RemoveInvoker(System.Object,System.String)">
            <summary>
            Removes the invoker from the adapter.
            </summary>
            <param name="invoker">The invoker object to remove.</param>
            <param name="eventName">The name of the event on the invoker the adapter is listening to.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.EventCommandAdapter`1.Dispose(System.Boolean)">
            <summary>
            Overriden to unhook and dispose all the invokers.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.Commands.EventCommandAdapter`1.ContainsInvoker(System.Object)">
            <summary>
            Checks if the adapter contains the invoker.
            </summary>
            <param name="invoker">The invoker to check for</param>
            <returns>true if the adapter contains the invoker; otherwise false.</returns>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Commands.EventCommandAdapter`1.Invokers">
            <summary>
            Gets the list of invokers in the adapter.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.Commands.EventCommandAdapter`1.InvokerCount">
            <summary>
            Gets the count of invokers in the adapter
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceComposer`2">
            <summary>
            Composer class that allows workspaces that cannot inherit from 
            <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2"/> to reuse its logic by 
            implementing <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace`2"/> and 
            forwarding all its <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace"/> implementation methods to an instance 
            of the composer.
            </summary>
            <typeparam name="TSmartPart">Type of smart parts supported by the workspace being composed.</typeparam>
            <typeparam name="TSmartPartInfo">Type of the smart part information received by the workspace.</typeparam>
            <remarks>
            For an example on how to reuse the logic in <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2"/> on workspaces 
            that inherit from another class already, take a look at the TabWorkspace in the WinForms project.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceComposer`2.#ctor(Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace{`0,`1})">
            <summary>
            Initializes the composer with the composedWorkspace that will 
            be called when needed by the base <see cref="T:Microsoft.Practices.CompositeUI.SmartParts.Workspace`2"/>.
            </summary>
            <param name="composedWorkspace">The workspace being composed with the behavior in this class.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceComposer`2.SetActiveSmartPart(`0)">
            <summary>
            Sets the active smart part in the workspace.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceComposer`2.ForceClose(`0)">
            <summary>
            Forcedly closes the smart part, without raising the <see cref="E:Microsoft.Practices.CompositeUI.SmartParts.IWorkspace.SmartPartClosing"/> event.
            </summary>
            <param name="smartPart"></param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceComposer`2.OnActivate(`0)">
            <summary>
            Calls <see cref="M:Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace`2.OnActivate(`0)"/> 
            on the composed workspace.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceComposer`2.OnApplySmartPartInfo(`0,`1)">
            <summary>
            Calls <see cref="M:Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace`2.OnApplySmartPartInfo(`0,`1)"/> 
            on the composed workspace.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceComposer`2.OnShow(`0,`1)">
            <summary>
            Calls <see cref="M:Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace`2.OnShow(`0,`1)"/> 
            on the composed workspace.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceComposer`2.OnHide(`0)">
            <summary>
            Calls <see cref="M:Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace`2.OnHide(`0)"/> 
            on the composed workspace.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceComposer`2.OnClose(`0)">
            <summary>
            Calls <see cref="M:Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace`2.OnClose(`0)"/> 
            on the composed workspace.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.SmartParts.WorkspaceComposer`2.ConvertFrom(Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo)">
            <summary>
            Calls <see cref="M:Microsoft.Practices.CompositeUI.SmartParts.IComposableWorkspace`2.ConvertFrom(Microsoft.Practices.CompositeUI.SmartParts.ISmartPartInfo)"/> 
            on the composed workspace.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.UIExtensionSite">
            <summary>
            Represents an extension site for UI elements.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIExtensionSite.#ctor(Microsoft.Practices.CompositeUI.UIElements.IUIElementAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.CompositeUI.UIExtensionSite"/> class with the provided
            adapter.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIExtensionSite.Add``1(``0)">
            <summary>
            Adds an element to the site.
            </summary>
            <typeparam name="TElement">The type of the element to be added.</typeparam>
            <param name="uiElement">The element to be added.</param>
            <returns>The added element. The adapter may return a different element than was
            passed; in this case, the returned element is the new element provided by the
            adapter.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIExtensionSite.Clear">
            <summary>
            Removes all items from the site, and removes them from the UI.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIExtensionSite.Contains(System.Object)">
            <summary>
            Determines if the site contains a UI element.
            </summary>
            <param name="uiElement">The element to find.</param>
            <returns>true if the element is present; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.UIExtensionSite.Remove(System.Object)">
            <summary>
            Removes an item from the site, and removes it from the UI.
            </summary>
            <param name="uiElement">The element to be removed.</param>
        </member>
        <member name="P:Microsoft.Practices.CompositeUI.UIExtensionSite.Count">
            <summary>
            Returns the number of items added to the site.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.BuilderStrategies.RootWorkItemInitializationStrategy">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder.BuilderStrategy"/> which is used to help the application startup sequence properly 
            initialize the root <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> when it is created.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.BuilderStrategies.RootWorkItemInitializationStrategy.#ctor(Microsoft.Practices.CompositeUI.BuilderStrategies.RootWorkItemInitializationStrategy.RootWorkItemInitializationCallback)">
            <summary>
            Creates a new instance of the RootWorkItemInitializationStrategy class using the given
            callback method.
            </summary>
            <param name="callback">The <see cref="T:Microsoft.Practices.CompositeUI.BuilderStrategies.RootWorkItemInitializationStrategy.RootWorkItemInitializationCallback"/> callback method
            to call when the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> is finishing its initialization.</param>
        </member>
        <member name="M:Microsoft.Practices.CompositeUI.BuilderStrategies.RootWorkItemInitializationStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)">
            <summary>
            See <see cref="M:Microsoft.Practices.ObjectBuilder.BuilderStrategy.BuildUp(Microsoft.Practices.ObjectBuilder.IBuilderContext,System.Type,System.Object,System.String)"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.CompositeUI.BuilderStrategies.RootWorkItemInitializationStrategy.RootWorkItemInitializationCallback">
            <summary>
            The delegate which is called just as the <see cref="T:Microsoft.Practices.CompositeUI.WorkItem"/> is finishing initialization.
            </summary>
        </member>
    </members>
</doc>
